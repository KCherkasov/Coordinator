<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.1.1">
  <zoom_level>5</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1295</x>
      <y>160</y>
      <w>160</w>
      <h>125</h>
    </coordinates>
    <panel_attributes>/GameObject/
--
#own_id: size_t
#name: std::string
#description:: std::string
--
+GameObject()
/+~GameObject()/
+get_own_id(): size_t
+get_name(result: std::string&amp;): size_t
+get_description(result: std::string&amp;): size_t
+set_own_id(value: const size_t&amp;): size_t
+set_name(value: const std::string&amp;): size_t
+set_description(value: const std::string&amp;): size_t
/+what(result: std::string&amp;): size_t/
/+update(): size_t/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>900</x>
      <y>445</y>
      <w>145</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>/GameCharacter/
--
#faction_id: size_t
--
+GameCharacter()
/+~GameCharacter()/
+get_faction_id(): size_t
+set_faction_id(value: const size_t&amp;): size_t

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1310</x>
      <y>335</y>
      <w>130</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>/LevelableObject/
--
#level: size_t
--
+LevelableObject()
/+~LevelableObject()/
+get_level(): size_t
+set_level(value: const size_t&amp;): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1370</x>
      <y>280</y>
      <w>15</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1540</x>
      <y>445</y>
      <w>205</w>
      <h>235</h>
    </coordinates>
    <panel_attributes>Item
--
#owner_id: size_t
#bonuses: std::vector&lt;size_t&gt;
#slots: std::vector&lt;bool&gt;
#kind: size_t
#rarity: size_t
#price: size_t
_#id: size_t = 1_
--
+Item()
/+~Item()/
+get_owner_id(): size_t
+get_bonuses(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_bonuses(index: const size_t&amp;): size_t
+get_slots(result: std::vector&lt;bool&gt;&amp;): size_t
+get_slots(index: const size_t&amp;): bool
+get_kind(): size_t
+get_rarity(): size_t
+get_price(): size_t
+set_owner_id(value: const size_t&amp;): size_t
+set_bonuses(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_bonuses(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_slots(value: const std::vector&lt;bool&gt;&amp;): size_t
+set_slots(index: const size_t&amp;, value: const bool&amp;): size_t
+set_kind(value: const size_t&amp;): size_t
+set_rarity(value: const size_t&amp;): size_t
+set_price(value: const size_t&amp;): size_t
+what(result: std::string&amp;): size_t
+update(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1370</x>
      <y>390</y>
      <w>290</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0;560.0;70.0;560.0;110.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>960</x>
      <y>420</y>
      <w>425</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;50.0;10.0;10.0;830.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1305</x>
      <y>555</y>
      <w>190</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>Inventory
--
#equipped: std::vector&lt;Item*&gt;
--
+Inventory()
+~Inventory()
+get_equipped(result: std::vector&lt;Item*&gt;&amp;): size_t
+get_equipped(index: const size_t&amp;, result: Item*&amp;): size_t
+get_bonuses(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_bonuses(index: const size_t&amp;): size_t
+set_equipped(value: const: std::vector&lt;Item*&gt;&amp;): size_t
+set_equipped(index: const size_t&amp;, value: Item*): size_t
+what(result: std::string&amp;): size_t
+update(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1490</x>
      <y>595</y>
      <w>60</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=1..*</panel_attributes>
    <additional_attributes>10.0;10.0;100.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1260</x>
      <y>595</y>
      <w>55</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;90.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1030</x>
      <y>555</y>
      <w>235</w>
      <h>260</h>
    </coordinates>
    <panel_attributes>Mercenary
--
#experience: std::vector&lt;size_t&gt;
#task_stats: std::vector&lt;size_t&gt;
#recruitment_stats: std::vector&lt;size_t&gt;
#history: std::vector&lt;size_t&gt;
#equipment: Inventory*
_#id: size_t = 1_--
+Mercenary()
/+~Mercenary()/
#level_up(): size_t
#evaluate_offer(risk: const size_t&amp;, payment: const size_t&amp;): size_t
+get_experience(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_experience(index: const size_t&amp;): size_t
+get_task_stats(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_task_stats(index: const size_t&amp;): size_t
+get_recruitment_stats(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_recruitment_stats(index: const size_t&amp;): size_t
+get_history(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_history(index: const size_t&amp;): size_t
+get_equipment(): Inventory&amp;
+set_experience(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_experience(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_task_stats(value: const: std::vector&lt;size_t&gt;&amp;): size_t
+set_task_stats(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_recruitment_stats(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_recruitment_stats(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_history(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_history(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_equipment(value: Inventory*): size_t
+what(result: std::string&amp;): size_t
+update(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>960</x>
      <y>500</y>
      <w>200</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0;380.0;60.0;380.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>665</x>
      <y>555</y>
      <w>260</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>Enemy
--
#task_stats: std::vector&lt;size_t&gt;
#loot_list: std::vector&lt;std::pair&lt;size_t, size_t&gt; &gt;
#reward: std::vector&lt;size_t&gt;
_#id: size_t = 1_
--
+Target()
/+~Target()/
+get_task_stats(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_task_stats(index: const size_t&amp;): size_t
+get_loot_list(result: std::vector&lt;std::pair&lt;size_t, size_t&gt; &gt;&amp;): size_t
+get_loot_list(index: const size_t&amp;, result: std::pair&lt;size_t, size_t&gt;&amp;): size_t
+get_reward(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_reward(index: const size_t&amp;): size_t
+set_task_stats(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_task_stats(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_loot_list(value: const std::vector&lt;std::pair&lt;size_t, size_t&gt; &gt;&amp;): size_t
+set_loot_list(index: const size_t&amp;, value: const std::pair&lt;size_t, size_t&gt;&amp;): size_t
+set_reward(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_reward(index: const size_t&amp;, value: const size_t&amp;): size_t
+what(result: std::string&amp;): size_t
+update(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>790</x>
      <y>525</y>
      <w>185</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0;350.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1370</x>
      <y>680</y>
      <w>95</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>enum TaskStats
--
TS_STEALTH
TS_RANGED
TS_SAPPER
TS_MELEE
TS_HEAVY
TS_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1260</x>
      <y>700</y>
      <w>120</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=-
&lt; used as task_stats indices</panel_attributes>
    <additional_attributes>10.0;20.0;220.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1370</x>
      <y>755</y>
      <w>95</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>enum RecruitmentStats
--
RS_GREED
RS_CAUTION
RS_INVENTIVE
RS_ACCURACY
RS_EDUCABILITY
RS_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1260</x>
      <y>765</y>
      <w>120</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=-
&lt; used as 
recruitment_stats 
indices</panel_attributes>
    <additional_attributes>10.0;20.0;220.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1460</x>
      <y>675</y>
      <w>150</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>lt=-
used as bonuses indices &gt;</panel_attributes>
    <additional_attributes>10.0;70.0;280.0;70.0;280.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1335</x>
      <y>445</y>
      <w>100</w>
      <h>75</h>
    </coordinates>
    <panel_attributes>enum Inventory_slots
--
IS_HEAD
IS_ARMOUR
IS_GLOVES
IS_BOOTS
IS_PRIMARY_WEAPON
IS_SECONDARY_WEAPON
IS_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1430</x>
      <y>475</y>
      <w>120</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=-
used as slots indices  &gt;</panel_attributes>
    <additional_attributes>10.0;20.0;220.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1395</x>
      <y>515</y>
      <w>95</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=-
used as equipped indices
                  v</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1370</x>
      <y>830</y>
      <w>95</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>enum MercHistory
--
MH_TASKS_COMPLETED
MH_TASKS_FAILED
MH_CASH_EARNED
MH_ENEMIES_KILLED
MH_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1200</x>
      <y>810</y>
      <w>180</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=-
     ^
used as 
 history 
 indices</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0;340.0;100.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>315</x>
      <y>420</y>
      <w>660</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;50.0;10.0;10.0;1300.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>205</x>
      <y>445</y>
      <w>230</w>
      <h>340</h>
    </coordinates>
    <panel_attributes>Contract
--
#reward: size_t
#employer_faction: size_t
#target_faction: size_t
#phase: size_t
#bonuses: std::vector&lt;size_t&gt;
#mercs: std::vector&lt;Mercenary*&gt; //or their own_ids shall be used here?
#enemies: std::vector&lt;Enemy*&gt;
#location: Location&amp;
_#id: size_t = 1_
--
+Contract()
/+Contract()/
+get_reward(): size_t
+get_employer_faction(): size_t
+get_target_faction(): size_t
+get_phase(): size_t
+get_bonuses(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_bonuses(index: const size_t&amp;): size_t
+get_mercs(result: std::vector&lt;Mercenary*&gt;&amp;): size_t
+get_mercs(index: const size_t&amp;, result: Mercenary*&amp;): size_t
+get_enemies(result: std::vector&lt;Enemy*&gt;&amp;): size_t
+get_enemies(index: const size_t&amp;, result: Enemy*&amp;): size_t
+get_location(): Location&amp;
+get_risk(): size_t
+set_reward(value: const size_t&amp;): size_t
+set_employer_faction(value: const size_t&amp;): size_t
+set_target_faction(value: const size_t&amp;): size_t
+set_phase(value: const size_t&amp;): size_t
+set_bonuses(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_bonuses(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_mercs(value: const std::vector&lt;Mercenary*&gt;&amp;): size_t
+set_mercs(index: const size_t&amp;, value: const Mercenary*&amp;): size_t
+set_enemies(value: const std::vector&lt;Enemy*&gt;&amp;): size_t
+set_enemies(index: const size_t&amp;, value: const Enemy*&amp;): size_t
+set_location(value: const Location&amp;): size_t
+what(result: std::string&amp;): size_t
+update(): size_t
+add_mercenary(new_merc: const Mercenary*&amp;): size_t
+remove_mercenary(index: const size_t&amp;): size_t
+make_offer(summ: const size_t&amp;): size_t
+is_done(): bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>430</x>
      <y>545</y>
      <w>245</w>
      <h>115</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1..*</panel_attributes>
    <additional_attributes>10.0;10.0;250.0;10.0;250.0;200.0;470.0;200.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>430</x>
      <y>580</y>
      <w>610</w>
      <h>185</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=1..*</panel_attributes>
    <additional_attributes>10.0;10.0;200.0;10.0;200.0;340.0;1200.0;340.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>205</x>
      <y>235</y>
      <w>195</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>Location
--
#stats: std::vector&lt;size_t&gt;
_#id: size_t = 1_
--
+Location()
+~Location()
+get_stats(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_stats(index: const size_t&amp;): size_t
+set_stats(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_stats(index: const size_t&amp;, value: const size_t&amp;): size_t
+what(result: std::string&amp;): size_t
+update(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>290</x>
      <y>330</y>
      <w>15</w>
      <h>125</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;230.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>295</x>
      <y>375</y>
      <w>95</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>   Type Object pattern here</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>480</x>
      <y>260</y>
      <w>75</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>enum LocationStats
--
LS_COVERS
LS_VISIBILITY
LS_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>395</x>
      <y>270</y>
      <w>95</w>
      <h>25</h>
    </coordinates>
    <panel_attributes>lt=-
&lt; used as 
stats indices</panel_attributes>
    <additional_attributes>10.0;20.0;170.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1645</x>
      <y>420</y>
      <w>480</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>940.0;50.0;940.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2010</x>
      <y>445</y>
      <w>210</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>Player
--
#cash: size_t
#history: std::vector&lt;size_t&gt;
#renown: std::vector&lt;size_t&gt;
_#id: size_t = 1_
--
+Player()
/~+Player()/
#level_up(): size_t
+get_cash(): size_t
+get_history(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_history(index: const size_t&amp;): size_t
+get_renown(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_renown(index: const size_t&amp;): size_t
+set_cash(value: const size_t&amp;): size_t
+set_history(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_history(index: const size_t&amp;, value:const size_t&amp;): size_t
+set_renown(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_renown(index: const size_t&amp;, value: const size_t&amp;): size_t
+what(result: std::string&amp;): size_t
+update(): size_t
+add_cash(amount: const size_t&amp;): size_t
+spend_cash(amount: const size_t&amp;): size_t
+add_history(index: const size_t&amp;): size_t
+add_history(index: const size_t&amp;, amount: const size_t&amp;): size_t
+add_renown(amount: const size_t&amp;): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>25</x>
      <y>595</y>
      <w>80</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>enum ContractPhases
--
CF_PENDING
CF_RECRUITING
CF_IN_PROGRESS
CF_SUCCESS
CF_FAILED
CF_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>100</x>
      <y>620</y>
      <w>115</w>
      <h>25</h>
    </coordinates>
    <panel_attributes>lt=-
used as &gt;
phase values</panel_attributes>
    <additional_attributes>10.0;20.0;210.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1450</x>
      <y>220</y>
      <w>140</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;150.0;10.0;150.0;220.0;260.0;220.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1580</x>
      <y>265</y>
      <w>180</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>Faction
--
#influence: size_t
#relationship: size_t
--
+Faction()
/+~Faction()/
+get_influence(): size_t
+get_relationship(): size_t
+set_influence(value: const size_t&amp;): size_t
+set_relationship(value: const size_t&amp;): size_t
+what(result: std::string&amp;): size_t
+update(): size_t
+increase_influence(amount: const size_t&amp;): size_t
+decrease_influence(amount: const size_t&amp;): size_t 
+increase_relationship(amount: const size_t&amp;): size_t
+decrease_relationship(amount: const size_t&amp;): size_t
+create_contract(result: Contract*&amp;): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>290</x>
      <y>185</y>
      <w>1015</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>2010.0;10.0;10.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1755</x>
      <y>355</y>
      <w>390</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=-
offers contracts to &gt;

&lt; takes and completes contracts for </panel_attributes>
    <additional_attributes>10.0;20.0;760.0;20.0;760.0;180.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1260</x>
      <y>1060</y>
      <w>215</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>World
--
#player: Player*
#locations: std::vector&lt;Location*&gt;
#factions: std::vector&lt;Faction*&gt;
#contracts: std::vector&lt;Contract*&gt;
#mercs: std::vector&lt;Mercenary*&gt;
#vendors: std::vector&lt;Vendor*&gt;
#time: size_t
--
+World()
+~World()
+game_loop(): size_t
+get_player_info(result: std::string&amp;):size_t
+get_faction_info(index: const size_t&amp;, result: std::string&amp;): size_t
+get_contract_info(index: const size_t&amp;, result: std::string&amp;): size_t
+get_vendor_info(index: const size_t&amp;, result: std::string&amp;): size_t
+get_time(result: std::string&amp;): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1355</x>
      <y>650</y>
      <w>795</w>
      <h>420</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;820.0;10.0;720.0;1570.0;720.0;1570.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1140</x>
      <y>810</y>
      <w>230</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>lt=-
m1=0..*</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;400.0;440.0;400.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>310</x>
      <y>780</y>
      <w>845</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>lt=-
m1=0..*</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;460.0;1670.0;460.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>0</x>
      <y>280</y>
      <w>325</w>
      <h>740</h>
    </coordinates>
    <panel_attributes>lt=-
m1=0..*</panel_attributes>
    <additional_attributes>410.0;10.0;10.0;10.0;10.0;1460.0;630.0;1460.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1370</x>
      <y>900</y>
      <w>95</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>enum MercAnswer
--
MA_OK
MA_TOO_BIG_RISK
MA_WANT_MORE_MONEY
MA_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1170</x>
      <y>810</y>
      <w>210</w>
      <h>125</h>
    </coordinates>
    <panel_attributes>lt=-



     ^
evaluate_offer()
return values</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;230.0;400.0;230.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1775</x>
      <y>685</y>
      <w>210</w>
      <h>145</h>
    </coordinates>
    <panel_attributes>Vendor
--
#faction_id: size_t
#assortment: std::vector&lt;Item*&gt;
_#id: size_t = 1_
--
+Vendor()
/+~Vendor()/
#form_assortment(): size_t
+get_faction_id(): size_t
+get_assortment(result: std::vector&lt;Item*&gt;&amp;):size_t
+get_assortment(index: const size_t&amp;, result: Item*&amp;): size_t
+set_faction_id(value: const size_t&amp;): size_t
+set_assortment(value: const std::vector&lt;Item*&gt;&amp;): size_t
+set_assortment(index: const size_t&amp;, value: const Item*&amp;): size_t
+what(result: std::string&amp;): size_t
+update(): size_t
+get_price_modifier(): size_t
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1875</x>
      <y>420</y>
      <w>15</w>
      <h>275</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;530.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1740</x>
      <y>555</y>
      <w>80</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=1..*</panel_attributes>
    <additional_attributes>140.0;260.0;140.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1930</x>
      <y>525</y>
      <w>90</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>lt=-
buys and sells &gt;
items</panel_attributes>
    <additional_attributes>160.0;20.0;10.0;20.0;10.0;320.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1880</x>
      <y>825</y>
      <w>25</w>
      <h>195</h>
    </coordinates>
    <panel_attributes>lt=-
m1=1..*</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;370.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1755</x>
      <y>325</y>
      <w>535</w>
      <h>695</h>
    </coordinates>
    <panel_attributes>lt=-
m1=1..*</panel_attributes>
    <additional_attributes>10.0;10.0;1050.0;10.0;1050.0;1370.0;770.0;1370.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>410</x>
      <y>1090</y>
      <w>135</w>
      <h>55</h>
    </coordinates>
    <panel_attributes>/Event/
--
#world: World&amp;
--
+Event(world: World&amp;)
/+~Event()/
/+happen(): size_t/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>410</x>
      <y>1070</y>
      <w>135</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>                Command pattern here</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>475</x>
      <y>1140</y>
      <w>15</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;180.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>430</x>
      <y>1230</y>
      <w>105</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>Derived classes hierarchy here
to realise various events,
including user input handling.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>970</x>
      <y>1165</y>
      <w>185</w>
      <h>85</h>
    </coordinates>
    <panel_attributes>EventsQueue
--
#events: std::vector&lt;QueueNode&gt;
--
+EventsQueue()
+~EventsQueue()
#heapify(): size_t
#pop(): size_t
+add_event(priority: const size_t&amp;, event: const Event*&amp;)
+remove_event(id: const size_t&amp;): size_t
+update(): size_t


</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>540</x>
      <y>1095</y>
      <w>730</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;friend&gt;&gt;</panel_attributes>
    <additional_attributes>1440.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>620</x>
      <y>1165</y>
      <w>190</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>QueueNode
--
_#id: size_t = 1_
#own_id: size_t
#priority: size_t
#event: Event*
--
+QueueNode(priority: const size_t&amp;, event: const Event*&amp;)
+~QueueNode()
+get_own_id(): size_t
+get_priority(): size_t
+set_priority(value: const size_t&amp;): size_t
+process(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>540</x>
      <y>1120</y>
      <w>185</w>
      <h>55</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>350.0;90.0;350.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>805</x>
      <y>1205</y>
      <w>175</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=0..*</panel_attributes>
    <additional_attributes>330.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1055</x>
      <y>1195</y>
      <w>320</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=-
changes state &gt;</panel_attributes>
    <additional_attributes>620.0;10.0;620.0;220.0;10.0;220.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>1290</x>
      <y>0</y>
      <w>155</w>
      <h>75</h>
    </coordinates>
    <panel_attributes>Actual questions:
-Game mode: real-time or turn-based?

-Engine for visualization? (proposal: Irrlicht)

-packages for data storage? 
 (proposals: sql database (via sqlite framework),
  json file(s) (via jsoncpp framework))</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>1295</x>
      <y>140</y>
      <w>160</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>                update() method pattern here</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>1120</x>
      <y>0</y>
      <w>145</w>
      <h>75</h>
    </coordinates>
    <panel_attributes>Color notation
--
--
group=0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1120</x>
      <y>15</y>
      <w>145</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>Written, tested
bg=green
group=0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1120</x>
      <y>45</y>
      <w>145</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>Partially written, not tested
bg=yellow
group=0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1120</x>
      <y>60</y>
      <w>145</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>Not written, not tested
group=0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1120</x>
      <y>30</y>
      <w>145</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>Written, not tested
bg=cyan
group=0</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
