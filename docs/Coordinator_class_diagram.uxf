<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.1.1">
  <zoom_level>5</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1260</x>
      <y>545</y>
      <w>195</w>
      <h>125</h>
    </coordinates>
    <panel_attributes>/GameObject/
bg=green
--
#own_id: size_t
#name: std::string
#description:: std::string
--
+GameObject()
/+~GameObject()/
+get_own_id(): size_t
+get_name(result: std::string&amp;): size_t
+get_description(result: std::string&amp;): size_t
+set_own_id(value: const size_t&amp;): size_t
+set_name(value: const std::string&amp;): size_t
+set_description(value: const std::string&amp;): size_t
/+what(result: std::string&amp;): size_t/
/+update(): size_t/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>855</x>
      <y>805</y>
      <w>210</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>/GameCharacter/
bg=green
--
#faction_id: size_t
#stats: std::vector&lt;size_t&gt;
--
+GameCharacter()
/+~GameCharacter()/
+get_faction_id(): size_t
+get_stats(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_stats(index: const size_t&amp;, result: size_t&amp;): size_t
+set_faction_id(value: const size_t&amp;): size_t
+set_stats(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_stats(index: const size_t&amp;, value: const size_t&amp;): size_t

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1295</x>
      <y>695</y>
      <w>155</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>/LevelableObject/
bg=green
--
#level: size_t
--
+LevelableObject()
/+~LevelableObject()/
+get_level(): size_t
+set_level(value: const size_t&amp;): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1370</x>
      <y>665</y>
      <w>15</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1540</x>
      <y>805</y>
      <w>205</w>
      <h>235</h>
    </coordinates>
    <panel_attributes>Item
bg=green
--
#owner_id: size_t
#bonuses: std::vector&lt;size_t&gt;
#slots: std::vector&lt;bool&gt;
#kind: size_t
#rarity: size_t
#price: size_t
_#id: size_t = 1_
--
+Item()
/+~Item()/
+get_owner_id(): size_t
+get_bonuses(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_bonuses(index: const size_t&amp;): size_t
+get_slots(result: std::vector&lt;bool&gt;&amp;): size_t
+get_slots(index: const size_t&amp;): bool
+get_kind(): size_t
+get_rarity(): size_t
+get_price(): size_t
+set_owner_id(value: const size_t&amp;): size_t
+set_bonuses(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_bonuses(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_slots(value: const std::vector&lt;bool&gt;&amp;): size_t
+set_slots(index: const size_t&amp;, value: const bool&amp;): size_t
+set_kind(value: const size_t&amp;): size_t
+set_rarity(value: const size_t&amp;): size_t
+set_price(value: const size_t&amp;): size_t
+what(result: std::string&amp;): size_t
+update(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1370</x>
      <y>750</y>
      <w>290</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0;560.0;70.0;560.0;110.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>960</x>
      <y>780</y>
      <w>425</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;50.0;10.0;10.0;830.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1295</x>
      <y>915</y>
      <w>205</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>Inventory
bg=green
--
#equipped: std::vector&lt;Item*&gt;
--
+Inventory()
+~Inventory()
+get_equipped(result: std::vector&lt;Item*&gt;&amp;): size_t
+get_equipped(index: const size_t&amp;, result: Item*&amp;): size_t
+get_bonuses(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_bonuses(index: const size_t&amp;): size_t
+set_equipped(value: const: std::vector&lt;Item*&gt;&amp;): size_t
+set_equipped(index: const size_t&amp;, value: Item*): size_t
+what(result: std::string&amp;): size_t
+update(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1495</x>
      <y>955</y>
      <w>55</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=1..*</panel_attributes>
    <additional_attributes>10.0;10.0;90.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1250</x>
      <y>975</y>
      <w>55</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;90.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>985</x>
      <y>950</y>
      <w>270</w>
      <h>225</h>
    </coordinates>
    <panel_attributes>Mercenary
bg=green
--
#experience: std::vector&lt;size_t&gt;
#recruitment_stats: std::vector&lt;size_t&gt;
#history: std::vector&lt;size_t&gt;
#equipment: Inventory*
_#id: size_t = 1_
--
+Mercenary()
/+~Mercenary()/
#level_up(): size_t
#evaluate_offer(risk: const size_t&amp;, payment: const size_t&amp;): size_t
+get_experience(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_experience(index: const size_t&amp;): size_t
+get_recruitment_stats(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_recruitment_stats(index: const size_t&amp;): size_t
+get_history(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_history(index: const size_t&amp;): size_t
+get_equipment(): Inventory&amp;
+set_experience(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_experience(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_recruitment_stats(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_recruitment_stats(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_history(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_history(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_equipment(value: Inventory*): size_t
+what(result: std::string&amp;): size_t
+update(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>960</x>
      <y>905</y>
      <w>190</w>
      <h>55</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0;360.0;60.0;360.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>620</x>
      <y>950</y>
      <w>305</w>
      <h>145</h>
    </coordinates>
    <panel_attributes>Enemy
bg=green
--
#loot_list: std::vector&lt;LootData&gt;
#reward: std::vector&lt;size_t&gt;
_#id: size_t = 1_
--
+Target()
/+~Target()/
+get_loot_list(result: std::vector&lt;LootData&gt;&amp;): size_t
+get_loot_list(index: const size_t&amp;, result: LootData&amp;): size_t
+get_reward(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_reward(index: const size_t&amp;): size_t
+set_loot_list(value: const std::vector&lt;LootData&gt;&amp;): size_t
+set_loot_list(index: const size_t&amp;, value: const LootData&amp;): size_t
+set_reward(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_reward(index: const size_t&amp;, value: const size_t&amp;): size_t
+what(result: std::string&amp;): size_t
+update(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>770</x>
      <y>930</y>
      <w>205</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;40.0;10.0;10.0;390.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1370</x>
      <y>1035</y>
      <w>95</w>
      <h>75</h>
    </coordinates>
    <panel_attributes>bg=green
enum StatsIndices
--
SI_POWER
SI_MELEE
SI_STEALTH
SI_RANGE
SI_AGILITY
SI_ENDURANCE
SI_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1250</x>
      <y>1060</y>
      <w>130</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=-
&lt; used as task_stats indices</panel_attributes>
    <additional_attributes>10.0;20.0;240.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1370</x>
      <y>1115</y>
      <w>95</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>bg=green
enum RecruitmentStats
--
RS_GREED
RS_CAUTION
RS_INVENTIVE
RS_ACCURACY
RS_EDUCABILITY
RS_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1250</x>
      <y>1125</y>
      <w>130</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=-
&lt; used as 
recruitment_stats 
indices</panel_attributes>
    <additional_attributes>10.0;20.0;240.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1460</x>
      <y>1035</y>
      <w>150</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>lt=-
used as bonuses indices &gt;</panel_attributes>
    <additional_attributes>10.0;70.0;280.0;70.0;280.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1335</x>
      <y>805</y>
      <w>100</w>
      <h>75</h>
    </coordinates>
    <panel_attributes>enum Inventory_slots
bg=green
--
IS_HEAD
IS_ARMOUR
IS_GLOVES
IS_BOOTS
IS_PRIMARY_WEAPON
IS_SECONDARY_WEAPON
IS_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1430</x>
      <y>835</y>
      <w>120</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=-
used as slots indices  &gt;</panel_attributes>
    <additional_attributes>10.0;20.0;220.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1395</x>
      <y>875</y>
      <w>95</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=-
used as equipped indices
                  v</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1370</x>
      <y>1190</y>
      <w>95</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>bg=green
enum MercHistory
--
MH_TASKS_COMPLETED
MH_TASKS_FAILED
MH_CASH_EARNED
MH_ENEMIES_KILLED
MH_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1200</x>
      <y>1170</y>
      <w>180</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=-
     ^
used as 
 history 
 indices</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0;340.0;100.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>315</x>
      <y>780</y>
      <w>660</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;50.0;10.0;10.0;1300.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>185</x>
      <y>805</y>
      <w>265</w>
      <h>340</h>
    </coordinates>
    <panel_attributes>Contract
bg=green
--
#reward: size_t
#employer_faction: size_t
#target_faction: size_t
#phase: size_t
#bonuses: std::vector&lt;size_t&gt;
#mercs: std::vector&lt;Mercenary*&gt; //or their own_ids shall be used here?
#enemies: std::vector&lt;Enemy*&gt;
#location: Location&amp;
_#id: size_t = 1_
--
+Contract()
/+Contract()/
+get_reward(): size_t
+get_employer_faction(): size_t
+get_target_faction(): size_t
+get_phase(): size_t
+get_bonuses(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_bonuses(index: const size_t&amp;): size_t
+get_mercs(result: std::vector&lt;Mercenary*&gt;&amp;): size_t
+get_mercs(index: const size_t&amp;, result: Mercenary*&amp;): size_t
+get_enemies(result: std::vector&lt;Enemy*&gt;&amp;): size_t
+get_enemies(index: const size_t&amp;, result: Enemy*&amp;): size_t
+get_location(): Location&amp;
+get_risk(): size_t
+set_reward(value: const size_t&amp;): size_t
+set_employer_faction(value: const size_t&amp;): size_t
+set_target_faction(value: const size_t&amp;): size_t
+set_phase(value: const size_t&amp;): size_t
+set_bonuses(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_bonuses(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_mercs(value: const std::vector&lt;Mercenary*&gt;&amp;): size_t
+set_mercs(index: const size_t&amp;, value: const Mercenary*&amp;): size_t
+set_enemies(value: const std::vector&lt;Enemy*&gt;&amp;): size_t
+set_enemies(index: const size_t&amp;, value: const Enemy*&amp;): size_t
+set_location(value: const Location&amp;): size_t
+what(result: std::string&amp;): size_t
+update(): size_t
+add_mercenary(new_merc: const Mercenary*&amp;): size_t
+remove_mercenary(index: const size_t&amp;): size_t
+make_offer(summ: const size_t&amp;): size_t
+is_done(): bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>445</x>
      <y>905</y>
      <w>185</w>
      <h>115</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1..*</panel_attributes>
    <additional_attributes>10.0;10.0;220.0;10.0;220.0;200.0;350.0;200.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>445</x>
      <y>940</y>
      <w>550</w>
      <h>185</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=1..*</panel_attributes>
    <additional_attributes>10.0;10.0;170.0;10.0;170.0;340.0;1080.0;340.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>185</x>
      <y>620</y>
      <w>225</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>Location
bg=green
--
#stats: std::vector&lt;size_t&gt;
_#id: size_t = 1_
--
+Location()
+~Location()
+get_stats(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_stats(index: const size_t&amp;): size_t
+set_stats(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_stats(index: const size_t&amp;, value: const size_t&amp;): size_t
+what(result: std::string&amp;): size_t
+update(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>290</x>
      <y>715</y>
      <w>15</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;180.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>295</x>
      <y>745</y>
      <w>95</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>   Type Object pattern here</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>490</x>
      <y>645</y>
      <w>75</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>enum LocationStats
bg=green
--
LS_COVERS
LS_VISIBILITY
LS_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>405</x>
      <y>655</y>
      <w>95</w>
      <h>25</h>
    </coordinates>
    <panel_attributes>lt=-
&lt; used as 
stats indices</panel_attributes>
    <additional_attributes>10.0;20.0;170.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1645</x>
      <y>780</y>
      <w>480</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>940.0;50.0;940.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1995</x>
      <y>805</y>
      <w>240</w>
      <h>215</h>
    </coordinates>
    <panel_attributes>Player
bg=green
--
#cash: size_t
#history: std::vector&lt;size_t&gt;
#renown: std::vector&lt;size_t&gt;
_#id: size_t = 1_
--
+Player()
/~+Player()/
#level_up(): size_t
+get_cash(): size_t
+get_history(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_history(index: const size_t&amp;): size_t
+get_renown(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_renown(index: const size_t&amp;): size_t
+set_cash(value: const size_t&amp;): size_t
+set_history(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_history(index: const size_t&amp;, value:const size_t&amp;): size_t
+set_renown(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_renown(index: const size_t&amp;, value: const size_t&amp;): size_t
+what(result: std::string&amp;): size_t
+update(): size_t
+add_cash(amount: const size_t&amp;): size_t
+spend_cash(amount: const size_t&amp;): size_t
+add_history(index: const size_t&amp;): size_t
+add_history(index: const size_t&amp;, amount: const size_t&amp;): size_t
+add_renown(amount: const size_t&amp;): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>20</x>
      <y>945</y>
      <w>85</w>
      <h>75</h>
    </coordinates>
    <panel_attributes>enum ContractPhases
bg=green
--
CP_PENDING
CP_RECRUITING
CP_IN_PROGRESS
CP_SUCCESS
CP_FAILED
CP_EXPIRED
CP_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>100</x>
      <y>980</y>
      <w>95</w>
      <h>25</h>
    </coordinates>
    <panel_attributes>lt=-
used as &gt;
phase values</panel_attributes>
    <additional_attributes>10.0;20.0;170.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1450</x>
      <y>580</y>
      <w>130</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;150.0;10.0;150.0;220.0;240.0;220.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1570</x>
      <y>615</y>
      <w>205</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>Faction
bg=green
--
#influence: size_t
#relationship: size_t
--
+Faction()
/+~Faction()/
+get_influence(): size_t
+get_relationship(): size_t
+set_influence(value: const size_t&amp;): size_t
+set_relationship(value: const size_t&amp;): size_t
+what(result: std::string&amp;): size_t
+update(): size_t
+increase_influence(amount: const size_t&amp;): size_t
+decrease_influence(amount: const size_t&amp;): size_t 
+increase_relationship(amount: const size_t&amp;): size_t
+decrease_relationship(amount: const size_t&amp;): size_t
+create_contract(result: Contract*&amp;): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>290</x>
      <y>600</y>
      <w>980</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>1940.0;10.0;10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1770</x>
      <y>715</y>
      <w>375</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=-
offers contracts to &gt;

&lt; takes and completes contracts for </panel_attributes>
    <additional_attributes>10.0;20.0;730.0;20.0;730.0;180.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1260</x>
      <y>1420</y>
      <w>250</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>World
--
#player: Player*
#locations: std::vector&lt;Location*&gt;
#factions: std::vector&lt;Faction*&gt;
#contracts: std::vector&lt;Contract*&gt;
#mercs: std::vector&lt;Mercenary*&gt;
#vendors: std::vector&lt;Vendor*&gt;
#time: size_t
--
+World()
+~World()
+game_loop(): size_t
+get_player_info(result: std::string&amp;):size_t
+get_faction_info(index: const size_t&amp;, result: std::string&amp;): size_t
+get_contract_info(index: const size_t&amp;, result: std::string&amp;): size_t
+get_vendor_info(index: const size_t&amp;, result: std::string&amp;): size_t
+get_time(result: std::string&amp;): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1355</x>
      <y>1015</y>
      <w>795</w>
      <h>415</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;810.0;10.0;710.0;1570.0;710.0;1570.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1140</x>
      <y>1170</y>
      <w>230</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>lt=-
m1=0..*</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;400.0;440.0;400.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>310</x>
      <y>1140</y>
      <w>845</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>lt=-
m1=0..*</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;460.0;1670.0;460.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>0</x>
      <y>665</y>
      <w>325</w>
      <h>715</h>
    </coordinates>
    <panel_attributes>lt=-
m1=0..*</panel_attributes>
    <additional_attributes>370.0;10.0;10.0;10.0;10.0;1410.0;630.0;1410.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1370</x>
      <y>1260</y>
      <w>95</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>enum MercAnswer
bg=green
--
MA_OK
MA_TOO_BIG_RISK
MA_WANT_MORE_MONEY
MA_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1170</x>
      <y>1170</y>
      <w>210</w>
      <h>125</h>
    </coordinates>
    <panel_attributes>lt=-



     ^
evaluate_offer()
return values</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;230.0;400.0;230.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1775</x>
      <y>1045</y>
      <w>245</w>
      <h>145</h>
    </coordinates>
    <panel_attributes>Vendor
--
#faction_id: size_t
#assortment: std::vector&lt;Item*&gt;
_#id: size_t = 1_
--
+Vendor()
/+~Vendor()/
#form_assortment(): size_t
+get_faction_id(): size_t
+get_assortment(result: std::vector&lt;Item*&gt;&amp;):size_t
+get_assortment(index: const size_t&amp;, result: Item*&amp;): size_t
+set_faction_id(value: const size_t&amp;): size_t
+set_assortment(value: const std::vector&lt;Item*&gt;&amp;): size_t
+set_assortment(index: const size_t&amp;, value: const Item*&amp;): size_t
+what(result: std::string&amp;): size_t
+update(): size_t
+get_price_modifier(): size_t
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1875</x>
      <y>780</y>
      <w>15</w>
      <h>275</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;530.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1740</x>
      <y>915</y>
      <w>80</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=1..*</panel_attributes>
    <additional_attributes>140.0;260.0;140.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1930</x>
      <y>885</y>
      <w>75</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>lt=-
buys and sells &gt;
items</panel_attributes>
    <additional_attributes>130.0;20.0;10.0;20.0;10.0;320.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1880</x>
      <y>1185</y>
      <w>25</w>
      <h>195</h>
    </coordinates>
    <panel_attributes>lt=-
m1=1..*</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;370.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1770</x>
      <y>685</y>
      <w>520</w>
      <h>695</h>
    </coordinates>
    <panel_attributes>lt=-
m1=1..*</panel_attributes>
    <additional_attributes>10.0;10.0;1020.0;10.0;1020.0;1370.0;740.0;1370.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>410</x>
      <y>1450</y>
      <w>135</w>
      <h>55</h>
    </coordinates>
    <panel_attributes>/Event/
--
#world: World&amp;
--
+Event(world: World&amp;)
/+~Event()/
/+happen(): size_t/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>410</x>
      <y>1430</y>
      <w>135</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>          Command pattern here</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>475</x>
      <y>1500</y>
      <w>15</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;180.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>430</x>
      <y>1590</y>
      <w>105</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>Derived classes hierarchy here
to realise various events,
including user input handling.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>970</x>
      <y>1525</y>
      <w>240</w>
      <h>85</h>
    </coordinates>
    <panel_attributes>EventsQueue
--
#events: std::vector&lt;QueueNode&gt;
--
+EventsQueue()
+~EventsQueue()
#heapify(): size_t
#pop(): size_t
+add_event(priority: const size_t&amp;, event: const Event*&amp;): size_t
+remove_event(id: const size_t&amp;): size_t
+update(): size_t


</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>540</x>
      <y>1455</y>
      <w>730</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;friend&gt;&gt;</panel_attributes>
    <additional_attributes>1440.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>620</x>
      <y>1525</y>
      <w>190</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>QueueNode
--
_#id: size_t = 1_
#own_id: size_t
#priority: size_t
#event: Event*
--
+QueueNode(priority: const size_t&amp;, event: const Event*&amp;)
+~QueueNode()
+get_own_id(): size_t
+get_priority(): size_t
+set_priority(value: const size_t&amp;): size_t
+process(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>540</x>
      <y>1480</y>
      <w>185</w>
      <h>55</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>350.0;90.0;350.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>805</x>
      <y>1565</y>
      <w>175</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=0..*</panel_attributes>
    <additional_attributes>330.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1055</x>
      <y>1555</y>
      <w>320</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=-
changes state &gt;</panel_attributes>
    <additional_attributes>620.0;10.0;620.0;220.0;10.0;220.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>640</x>
      <y>360</y>
      <w>155</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>Actual questions:
-Game mode: real-time or turn-based?

-Engine for visualization? (proposal: Irrlicht)

-packages for data storage? 
 (proposals: sql database (via sqlite framework),
  json file(s) (via jsoncpp framework))</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>1455</x>
      <y>555</y>
      <w>105</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>   update() method pattern</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>470</x>
      <y>360</y>
      <w>145</w>
      <h>75</h>
    </coordinates>
    <panel_attributes>Color notation
--
--
group=0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>470</x>
      <y>375</y>
      <w>145</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>Written, tested
bg=green
group=0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>470</x>
      <y>405</y>
      <w>145</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>Partially written, not tested
bg=yellow
group=0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>470</x>
      <y>420</y>
      <w>145</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>Not written, not tested
group=0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>470</x>
      <y>390</y>
      <w>145</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>Written, not tested
bg=cyan
group=0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>985</x>
      <y>1390</y>
      <w>80</w>
      <h>75</h>
    </coordinates>
    <panel_attributes>Not the best decision,
other ways to provide
Event's derivatives
with access to World's
protected fields?</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1675</x>
      <y>1115</y>
      <w>70</w>
      <h>75</h>
    </coordinates>
    <panel_attributes>enum ItemRarity
bg=green
--
IR_TRASH
IR_COMMON
IR_GOOD
IR_RARE
IR_EPIC
IR_LEGENDARY
IR_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1705</x>
      <y>1035</y>
      <w>40</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=-
     ^
 used as
 rarity
 values</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;160.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>725</x>
      <y>1200</y>
      <w>230</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>MercSpec
bg=green
--
#name: std::string
#description: std::string
#base_stats: std::vector&lt;size_t&gt;
--
+MercSpec()
+~MercSpec()
+get_name(result: std::string&amp;): size_t
+get_description(result: std::string&amp;): size_t
+get_base_stats(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_base_stats(index: const size_t&amp;, result: size_t&amp;): size_t
+set_name(const std::string&amp; value): size_t
+set_description(const std::string&amp; value): size_t
+set_bonuses(const std::vector&lt;size_t&gt;&amp; value): size_t
+set_bonuses(const size_t&amp; index, const size_t&amp; value): size_t
+what(result: std::string&amp;): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>950</x>
      <y>1170</y>
      <w>175</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>330.0;10.0;330.0;210.0;10.0;210.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>995</x>
      <y>1260</y>
      <w>95</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>   Type Object pattern here</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1065</x>
      <y>115</y>
      <w>255</w>
      <h>55</h>
    </coordinates>
    <panel_attributes>/Observer/
bg=cyan
--

--
+Observer()
/+~Observer()/
+on_notify(message: Message*): size_t
group=2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1185</x>
      <y>165</y>
      <w>15</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=1
group=2</panel_attributes>
    <additional_attributes>10.0;120.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>1155</x>
      <y>0</y>
      <w>65</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>Polymorph hierarchy of observers here
group=2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1185</x>
      <y>30</y>
      <w>15</w>
      <h>95</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
group=2</panel_attributes>
    <additional_attributes>10.0;170.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1405</x>
      <y>120</y>
      <w>125</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>/Message/
bg=green
--
#sender: GameObject*
--
+Message(sender: GameObject*)
/+~Message()/
+sender(): GameObject*
group=2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1315</x>
      <y>130</y>
      <w>100</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=-
&lt; being sent to
group=2</panel_attributes>
    <additional_attributes>10.0;20.0;180.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>1590</x>
      <y>125</y>
      <w>70</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>Polymorph messages hierarchy here
group=2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1525</x>
      <y>135</y>
      <w>75</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
group=2</panel_attributes>
    <additional_attributes>10.0;10.0;130.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1100</x>
      <y>225</y>
      <w>190</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>Observing
bg=cyan
--
+next: Observing*
+observer: Observer*
--
+Observing(next: Observing*, observer: Observer*)
+~Observing()
group=2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1110</x>
      <y>330</y>
      <w>170</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>Subject
bg=cyan
--
#head: Observing*
--
+Subject()
+~Subject()
#notify(Message* msg)
+add_observer(observer: Observer*): size_t
+remove_observer(observer: Observer*): size_t
+update(msg: Message*): size_t
group=2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1185</x>
      <y>270</y>
      <w>25</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=0..*
group=2</panel_attributes>
    <additional_attributes>10.0;120.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1275</x>
      <y>165</y>
      <w>165</w>
      <h>225</h>
    </coordinates>
    <panel_attributes>lt=-
sends &gt;
group=2</panel_attributes>
    <additional_attributes>10.0;430.0;310.0;430.0;310.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1360</x>
      <y>165</y>
      <w>130</w>
      <h>390</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>240.0;10.0;240.0;630.0;10.0;630.0;10.0;760.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1105</x>
      <y>460</y>
      <w>185</w>
      <h>55</h>
    </coordinates>
    <panel_attributes>SubjectNode
bg=cyan
group=2
--
+next: SubjectNode*
+subject: Subject*
--
+SubjectNode(next: SubjectNode*, subject: Subject*)
+~SubjectNode()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1185</x>
      <y>405</y>
      <w>15</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
group=2
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;110.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1185</x>
      <y>510</y>
      <w>85</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=0..*</panel_attributes>
    <additional_attributes>150.0;150.0;10.0;150.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>640</x>
      <y>875</y>
      <w>80</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>LootData
bg=green
--
+item_id: size_t
+drop_chance: size_t
+max_qunatity: size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>670</x>
      <y>910</y>
      <w>25</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1..*</panel_attributes>
    <additional_attributes>10.0;80.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>20</x>
      <y>870</y>
      <w>85</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>enum ContractRewards
bg=green
--
CR_MONEY
CR_EXPERIENCE
CR_EMPLOYER_REP
CR_TARGET_REP
CR_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>100</x>
      <y>890</y>
      <w>95</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=-
used as &gt;
bonuses and
rewards indices</panel_attributes>
    <additional_attributes>10.0;20.0;170.0;20.0</additional_attributes>
  </element>
</diagram>
