<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.1.1">
  <zoom_level>7</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2093</x>
      <y>21</y>
      <w>224</w>
      <h>175</h>
    </coordinates>
    <panel_attributes>/GameObject/
--
#own_id: size_t
#name: std::string
#description:: std::string
--
+GameObject()
/+~GameObject()/
+get_own_id(): size_t
+get_name(result: std::string&amp;): size_t
+get_description(result: std::string&amp;): size_t
+set_own_id(value: const size_t&amp;): size_t
+set_name(value: const std::string&amp;): size_t
+set_description(value: const std::string&amp;): size_t
/+what(result: std::string&amp;): size_t/
/+update(): size_t/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1225</x>
      <y>434</y>
      <w>203</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>/GameCharacter/
--
#faction_id: size_t
--
+GameCharacter()
/+~GameCharacter()/
+get_faction_id(): size_t
+set_faction_id(value: const size_t&amp;): size_t

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1799</x>
      <y>280</y>
      <w>182</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>/LevelableObject/
--
#level: size_t
--
+LevelableObject()
/+~LevelableObject()/
+get_level(): size_t
+set_level(value: const size_t&amp;): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1876</x>
      <y>189</y>
      <w>357</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>490.0;10.0;490.0;80.0;10.0;80.0;10.0;130.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2121</x>
      <y>434</y>
      <w>287</w>
      <h>329</h>
    </coordinates>
    <panel_attributes>Item
--
#owner_id: ssize_t
#bonuses: std::vector&lt;size_t&gt;
#slots: std::vector&lt;bool&gt;
#kind: size_t
#rarity: size_t
#price: size_t
_#id: size_t = 1_
--
+Item()
/+~Item()/
+get_owner_id(): ssize_t
+get_bonuses(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_bonuses(index: const size_t&amp;): size_t
+get_slots(result: std::vector&lt;bool&gt;&amp;): size_t
+get_slots(index: const size_t&amp;): bool
+get_kind(): size_t
+get_rarity(): size_t
+get_price(): size_t
+set_owner_id(value: const ssize_t&amp;): size_t
+set_bonuses(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_bonuses(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_slots(value: const std::vector&lt;bool&gt;&amp;): size_t
+set_slots(index: const size_t&amp;, value: const bool&amp;): size_t
+set_kind(value: const size_t&amp;): size_t
+set_rarity(value: const size_t&amp;): size_t
+set_price(value: const size_t&amp;): size_t
+what(result: std::string&amp;): size_t
+update(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1883</x>
      <y>357</y>
      <w>406</w>
      <h>91</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0;560.0;70.0;560.0;110.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1309</x>
      <y>399</y>
      <w>595</w>
      <h>49</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;50.0;10.0;10.0;830.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1792</x>
      <y>588</y>
      <w>266</w>
      <h>154</h>
    </coordinates>
    <panel_attributes>Inventory
--
#equipped: std::vector&lt;Item*&gt;
--
+Inventory()
+~Inventory()
+get_equipped(result: std::vector&lt;Item*&gt;&amp;): size_t
+get_equipped(index: const size_t&amp;, result: Item*&amp;): size_t
+get_bonuses(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_bonuses(index: const size_t&amp;): size_t
+set_equipped(value: const: std::vector&lt;Item*&gt;&amp;): size_t
+set_equipped(index: const size_t&amp;, value: Item*): size_t
+what(result: std::string&amp;): size_t
+update(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2051</x>
      <y>644</y>
      <w>84</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=1..*</panel_attributes>
    <additional_attributes>10.0;10.0;100.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1729</x>
      <y>644</y>
      <w>77</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;90.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1407</x>
      <y>588</y>
      <w>329</w>
      <h>343</h>
    </coordinates>
    <panel_attributes>Mercenary
--
#experience: std::vector&lt;size_t&gt;
#task_stats: std::vector&lt;size_t&gt;
#recruitment_stats: std::vector&lt;size_t&gt;
#history: std::vector&lt;size_t&gt;
#equipment: Inventory*
_#id: size_t = 1_
--
+Mercenary()
/+~Mercenary()/
+get_experience(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_experience(index: const size_t&amp;): size_t
+get_task_stats(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_task_stats(index: const size_t&amp;): size_t
+get_recruitment_stats(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_recruitment_stats(index: const size_t&amp;): size_t
+get_history(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_history(index: const size_t&amp;): size_t
+get_equipment(): Inventory&amp;
+set_experience(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_experience(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_task_stats(value: const: std::vector&lt;size_t&gt;&amp;): size_t
+set_task_stats(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_recruitment_stats(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_recruitment_stats(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_history(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_history(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_equipment(value: Inventory*): size_t
+what(result: std::string&amp;): size_t
+update(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1309</x>
      <y>511</y>
      <w>280</w>
      <h>91</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0;380.0;60.0;380.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>896</x>
      <y>588</y>
      <w>364</w>
      <h>238</h>
    </coordinates>
    <panel_attributes>Enemy
--
#task_stats: std::vector&lt;size_t&gt;
#loot_list: std::vector&lt;std::pair&lt;size_t, size_t&gt; &gt;
#reward: std::vector&lt;size_t&gt;
--
+Target()
/+~Target()/
+get_task_stats(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_task_stats(index: const size_t&amp;): size_t
+get_loot_list(result: std::vector&lt;std::pair&lt;size_t, size_t&gt; &gt;&amp;): size_t
+get_loot_list(index: const size_t&amp;, result: std::pair&lt;size_t, size_t&gt;&amp;): size_t
+get_reward(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_reward(index: const size_t&amp;): size_t
+set_task_stats(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_task_stats(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_loot_list(value: const std::vector&lt;std::pair&lt;size_t, size_t&gt; &gt;&amp;): size_t
+set_loot_list(index: const size_t&amp;, value: const std::pair&lt;size_t, size_t&gt;&amp;): size_t
+set_reward(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_reward(index: const size_t&amp;, value: const size_t&amp;): size_t
+what(result: std::string&amp;): size_t
+update(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1071</x>
      <y>546</y>
      <w>259</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0;350.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1883</x>
      <y>763</y>
      <w>119</w>
      <h>91</h>
    </coordinates>
    <panel_attributes>enum TaskStats
--
TS_STEALTH
TS_RANGED
TS_SAPPER
TS_MELEE
TS_HEAVY
TS_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1729</x>
      <y>791</y>
      <w>168</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>lt=-
&lt; used as task_stats indices</panel_attributes>
    <additional_attributes>10.0;20.0;220.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1883</x>
      <y>868</y>
      <w>119</w>
      <h>91</h>
    </coordinates>
    <panel_attributes>enum RecruitmentStats
--
RS_GREED
RS_CAUTION
RS_INVENTIVE
RS_ACCURACY
RS_EDUCABILITY
RS_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1729</x>
      <y>882</y>
      <w>168</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>lt=-
&lt; used as 
recruitment_stats 
indices</panel_attributes>
    <additional_attributes>10.0;20.0;220.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1995</x>
      <y>756</y>
      <w>224</w>
      <h>63</h>
    </coordinates>
    <panel_attributes>lt=-
used as bonuses indices &gt;</panel_attributes>
    <additional_attributes>10.0;70.0;300.0;70.0;300.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1834</x>
      <y>434</y>
      <w>140</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>enum Inventory_slots
--
IS_HEAD
IS_ARMOUR
IS_GLOVES
IS_BOOTS
IS_PRIMARY_WEAPON
IS_SECONDARY_WEAPON
IS_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1967</x>
      <y>476</y>
      <w>168</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>lt=-
used as slots indices  &gt;</panel_attributes>
    <additional_attributes>10.0;20.0;220.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1918</x>
      <y>532</y>
      <w>133</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=-
used as equipped indices
                  v</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1883</x>
      <y>973</y>
      <w>119</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>enum MercHistory
--
MH_TASKS_COMPLETED
MH_TASKS_FAILED
MH_CASH_EARNED
MH_ENEMIES_KILLED
MH_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1645</x>
      <y>924</y>
      <w>252</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>lt=-
     ^
used as 
 history 
 indices</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;130.0;340.0;130.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>406</x>
      <y>399</y>
      <w>924</w>
      <h>49</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;50.0;10.0;10.0;1300.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>252</x>
      <y>434</y>
      <w>322</w>
      <h>399</h>
    </coordinates>
    <panel_attributes>/Contract/
--
#reward: size_t
#employer_faction: size_t
#target_faction: size_t
#phase: size_t
#bonuses: std::vector&lt;size_t&gt;
#mercs: std::vector&lt;Mercenary*&gt; //or their own_ids shall be used here?
#enemies: std::vector&lt;Enemy*&gt;
#location: Location&amp;
--
+Contract()
/+Contract()/
+get_reward(): size_t
+get_employer_faction(): size_t
+get_target_faction(): size_t
+get_phase(): size_t
+get_bonuses(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_bonuses(index: const size_t&amp;): size_t
+get_mercs(result: std::vector&lt;Mercenary*&gt;&amp;): size_t
+get_mercs(index: const size_t&amp;, result: Mercenary*&amp;): size_t
+get_enemies(result: std::vector&lt;Enemy*&gt;&amp;): size_t
+get_enemies(index: const size_t&amp;, result: Enemy*&amp;): size_t
+get_location(): Location&amp;
+get_risk(): size_t
+set_reward(value: const size_t&amp;): size_t
+set_employer_faction(value: const size_t&amp;): size_t
+set_target_faction(value: const size_t&amp;): size_t
+set_phase(value: const size_t&amp;): size_t
+set_bonuses(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_bonuses(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_mercs(value: const std::vector&lt;Mercenary*&gt;&amp;): size_t
+set_mercs(index: const size_t&amp;, value: const Mercenary*&amp;): size_t
+set_enemies(value: const std::vector&lt;Enemy*&gt;&amp;): size_t
+set_enemies(index: const size_t&amp;, value: const Enemy*&amp;): size_t
+set_location(value: const Location&amp;): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>567</x>
      <y>574</y>
      <w>343</w>
      <h>161</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1..*</panel_attributes>
    <additional_attributes>10.0;10.0;250.0;10.0;250.0;200.0;470.0;200.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>567</x>
      <y>623</y>
      <w>854</w>
      <h>259</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=1..*</panel_attributes>
    <additional_attributes>10.0;10.0;200.0;10.0;200.0;340.0;1200.0;340.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>252</x>
      <y>91</y>
      <w>273</w>
      <h>182</h>
    </coordinates>
    <panel_attributes>Location
--
#name: std::string
#description: std::string
#stats: std::vector&lt;size_t&gt;
--
+Location()
+~Location()
+get_name(result: std::string&amp;): size_t
+get_description(result: std::string&amp;): size_t
+get_stats(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_stats(index: const size_t&amp;): size_t
+set_name(value: const std::string&amp;): size_t
+set_description(value: const std::string&amp;): size_t
+set_stats(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_stats(index: const size_t&amp;, value: const size_t&amp;): size_t
+what(result: std::string&amp;): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>371</x>
      <y>266</y>
      <w>21</w>
      <h>182</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;240.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>378</x>
      <y>336</y>
      <w>133</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>   Type Object pattern here</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>637</x>
      <y>126</y>
      <w>105</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>enum LocationStats
--
LS_COVERS
LS_VISIBILITY
LS_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>518</x>
      <y>140</y>
      <w>133</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>lt=-
&lt; used as 
stats indices</panel_attributes>
    <additional_attributes>10.0;20.0;170.0;20.0</additional_attributes>
  </element>
</diagram>
