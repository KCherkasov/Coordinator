<?xml version="1.0" encoding="UTF-8"?><diagram program="umlet" version="13.3">
  <zoom_level>7</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1813</x>
      <y>224</y>
      <w>224</w>
      <h>175</h>
    </coordinates>
    <panel_attributes>/GameObject/
bg=cyan
--
#own_id: size_t
#name: std::string
#description:: std::string
--
+GameObject()
/+~GameObject()/
+get_own_id(): size_t
+get_name(result: std::string&amp;): size_t
+get_description(result: std::string&amp;): size_t
+set_own_id(value: const size_t&amp;): size_t
+set_name(value: const std::string&amp;): size_t
+set_description(value: const std::string&amp;): size_t
/+what(result: std::string&amp;): size_t/
/+update(): size_t/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1260</x>
      <y>623</y>
      <w>203</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>/GameCharacter/
--
#faction_id: size_t
--
+GameCharacter()
/+~GameCharacter()/
+get_faction_id(): size_t
+set_faction_id(value: const size_t&amp;): size_t

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1834</x>
      <y>469</y>
      <w>182</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>/LevelableObject/
bg=cyan
--
#level: size_t
--
+LevelableObject()
/+~LevelableObject()/
+get_level(): size_t
+set_level(value: const size_t&amp;): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1918</x>
      <y>392</y>
      <w>21</w>
      <h>91</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2156</x>
      <y>623</y>
      <w>287</w>
      <h>329</h>
    </coordinates>
    <panel_attributes>Item
--
#owner_id: size_t
#bonuses: std::vector&lt;size_t&gt;
#slots: std::vector&lt;bool&gt;
#kind: size_t
#rarity: size_t
#price: size_t
_#id: size_t = 1_
--
+Item()
/+~Item()/
+get_owner_id(): size_t
+get_bonuses(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_bonuses(index: const size_t&amp;): size_t
+get_slots(result: std::vector&lt;bool&gt;&amp;): size_t
+get_slots(index: const size_t&amp;): bool
+get_kind(): size_t
+get_rarity(): size_t
+get_price(): size_t
+set_owner_id(value: const size_t&amp;): size_t
+set_bonuses(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_bonuses(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_slots(value: const std::vector&lt;bool&gt;&amp;): size_t
+set_slots(index: const size_t&amp;, value: const bool&amp;): size_t
+set_kind(value: const size_t&amp;): size_t
+set_rarity(value: const size_t&amp;): size_t
+set_price(value: const size_t&amp;): size_t
+what(result: std::string&amp;): size_t
+update(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1918</x>
      <y>546</y>
      <w>406</w>
      <h>91</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0;560.0;70.0;560.0;110.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1344</x>
      <y>588</y>
      <w>595</w>
      <h>49</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;50.0;10.0;10.0;830.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1827</x>
      <y>777</y>
      <w>266</w>
      <h>154</h>
    </coordinates>
    <panel_attributes>Inventory
--
#equipped: std::vector&lt;Item*&gt;
--
+Inventory()
+~Inventory()
+get_equipped(result: std::vector&lt;Item*&gt;&amp;): size_t
+get_equipped(index: const size_t&amp;, result: Item*&amp;): size_t
+get_bonuses(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_bonuses(index: const size_t&amp;): size_t
+set_equipped(value: const: std::vector&lt;Item*&gt;&amp;): size_t
+set_equipped(index: const size_t&amp;, value: Item*): size_t
+what(result: std::string&amp;): size_t
+update(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2086</x>
      <y>833</y>
      <w>84</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=1..*</panel_attributes>
    <additional_attributes>10.0;10.0;100.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1764</x>
      <y>833</y>
      <w>77</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;90.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1442</x>
      <y>777</y>
      <w>329</w>
      <h>364</h>
    </coordinates>
    <panel_attributes>Mercenary
--
#experience: std::vector&lt;size_t&gt;
#task_stats: std::vector&lt;size_t&gt;
#recruitment_stats: std::vector&lt;size_t&gt;
#history: std::vector&lt;size_t&gt;
#equipment: Inventory*
_#id: size_t = 1_--
+Mercenary()
/+~Mercenary()/
#level_up(): size_t
#evaluate_offer(risk: const size_t&amp;, payment: const size_t&amp;): size_t
+get_experience(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_experience(index: const size_t&amp;): size_t
+get_task_stats(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_task_stats(index: const size_t&amp;): size_t
+get_recruitment_stats(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_recruitment_stats(index: const size_t&amp;): size_t
+get_history(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_history(index: const size_t&amp;): size_t
+get_equipment(): Inventory&amp;
+set_experience(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_experience(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_task_stats(value: const: std::vector&lt;size_t&gt;&amp;): size_t
+set_task_stats(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_recruitment_stats(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_recruitment_stats(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_history(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_history(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_equipment(value: Inventory*): size_t
+what(result: std::string&amp;): size_t
+update(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1344</x>
      <y>700</y>
      <w>280</w>
      <h>91</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0;380.0;60.0;380.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>868</x>
      <y>777</y>
      <w>427</w>
      <h>252</h>
    </coordinates>
    <panel_attributes>Enemy
--
#task_stats: std::vector&lt;size_t&gt;
#loot_list: std::vector&lt;std::pair&lt;size_t, size_t&gt; &gt;
#reward: std::vector&lt;size_t&gt;
_#id: size_t = 1_
--
+Target()
/+~Target()/
+get_task_stats(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_task_stats(index: const size_t&amp;): size_t
+get_loot_list(result: std::vector&lt;std::pair&lt;size_t, size_t&gt; &gt;&amp;): size_t
+get_loot_list(index: const size_t&amp;, result: std::pair&lt;size_t, size_t&gt;&amp;): size_t
+get_reward(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_reward(index: const size_t&amp;): size_t
+set_task_stats(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_task_stats(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_loot_list(value: const std::vector&lt;std::pair&lt;size_t, size_t&gt; &gt;&amp;): size_t
+set_loot_list(index: const size_t&amp;, value: const std::pair&lt;size_t, size_t&gt;&amp;): size_t
+set_reward(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_reward(index: const size_t&amp;, value: const size_t&amp;): size_t
+what(result: std::string&amp;): size_t
+update(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1078</x>
      <y>735</y>
      <w>287</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0;390.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1918</x>
      <y>952</y>
      <w>133</w>
      <h>91</h>
    </coordinates>
    <panel_attributes>bg=green
enum TaskStats
--
TS_STEALTH
TS_RANGED
TS_SAPPER
TS_MELEE
TS_HEAVY
TS_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1764</x>
      <y>980</y>
      <w>168</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>lt=-
&lt; used as task_stats indices</panel_attributes>
    <additional_attributes>10.0;20.0;220.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1918</x>
      <y>1057</y>
      <w>133</w>
      <h>91</h>
    </coordinates>
    <panel_attributes>bg=green
enum RecruitmentStats
--
RS_GREED
RS_CAUTION
RS_INVENTIVE
RS_ACCURACY
RS_EDUCABILITY
RS_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1764</x>
      <y>1071</y>
      <w>168</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>lt=-
&lt; used as 
recruitment_stats 
indices</panel_attributes>
    <additional_attributes>10.0;20.0;220.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2044</x>
      <y>945</y>
      <w>210</w>
      <h>63</h>
    </coordinates>
    <panel_attributes>lt=-
used as bonuses indices &gt;</panel_attributes>
    <additional_attributes>10.0;70.0;280.0;70.0;280.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1869</x>
      <y>623</y>
      <w>140</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>enum Inventory_slots
bg=green
--
IS_HEAD
IS_ARMOUR
IS_GLOVES
IS_BOOTS
IS_PRIMARY_WEAPON
IS_SECONDARY_WEAPON
IS_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2002</x>
      <y>665</y>
      <w>168</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>lt=-
used as slots indices  &gt;</panel_attributes>
    <additional_attributes>10.0;20.0;220.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1953</x>
      <y>721</y>
      <w>140</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=-
used as equipped indices
                  v</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1918</x>
      <y>1162</y>
      <w>133</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>bg=green
enum MercHistory
--
MH_TASKS_COMPLETED
MH_TASKS_FAILED
MH_CASH_EARNED
MH_ENEMIES_KILLED
MH_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1680</x>
      <y>1134</y>
      <w>252</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>lt=-
     ^
used as 
 history 
 indices</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0;340.0;100.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>441</x>
      <y>588</y>
      <w>924</w>
      <h>49</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;50.0;10.0;10.0;1300.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>287</x>
      <y>623</y>
      <w>322</w>
      <h>476</h>
    </coordinates>
    <panel_attributes>Contract
--
#reward: size_t
#employer_faction: size_t
#target_faction: size_t
#phase: size_t
#bonuses: std::vector&lt;size_t&gt;
#mercs: std::vector&lt;Mercenary*&gt; //or their own_ids shall be used here?
#enemies: std::vector&lt;Enemy*&gt;
#location: Location&amp;
_#id: size_t = 1_
--
+Contract()
/+Contract()/
+get_reward(): size_t
+get_employer_faction(): size_t
+get_target_faction(): size_t
+get_phase(): size_t
+get_bonuses(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_bonuses(index: const size_t&amp;): size_t
+get_mercs(result: std::vector&lt;Mercenary*&gt;&amp;): size_t
+get_mercs(index: const size_t&amp;, result: Mercenary*&amp;): size_t
+get_enemies(result: std::vector&lt;Enemy*&gt;&amp;): size_t
+get_enemies(index: const size_t&amp;, result: Enemy*&amp;): size_t
+get_location(): Location&amp;
+get_risk(): size_t
+set_reward(value: const size_t&amp;): size_t
+set_employer_faction(value: const size_t&amp;): size_t
+set_target_faction(value: const size_t&amp;): size_t
+set_phase(value: const size_t&amp;): size_t
+set_bonuses(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_bonuses(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_mercs(value: const std::vector&lt;Mercenary*&gt;&amp;): size_t
+set_mercs(index: const size_t&amp;, value: const Mercenary*&amp;): size_t
+set_enemies(value: const std::vector&lt;Enemy*&gt;&amp;): size_t
+set_enemies(index: const size_t&amp;, value: const Enemy*&amp;): size_t
+set_location(value: const Location&amp;): size_t
+what(result: std::string&amp;): size_t
+update(): size_t
+add_mercenary(new_merc: const Mercenary*&amp;): size_t
+remove_mercenary(index: const size_t&amp;): size_t
+make_offer(summ: const size_t&amp;): size_t
+is_done(): bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>602</x>
      <y>763</y>
      <w>280</w>
      <h>161</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1..*</panel_attributes>
    <additional_attributes>10.0;10.0;250.0;10.0;250.0;200.0;380.0;200.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>602</x>
      <y>812</y>
      <w>854</w>
      <h>259</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=1..*</panel_attributes>
    <additional_attributes>10.0;10.0;200.0;10.0;200.0;340.0;1200.0;340.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>287</x>
      <y>329</y>
      <w>273</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>Location
--
#stats: std::vector&lt;size_t&gt;
_#id: size_t = 1_
--
+Location()
+~Location()
+get_stats(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_stats(index: const size_t&amp;): size_t
+set_stats(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_stats(index: const size_t&amp;, value: const size_t&amp;): size_t
+what(result: std::string&amp;): size_t
+update(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>406</x>
      <y>462</y>
      <w>21</w>
      <h>175</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;230.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>413</x>
      <y>525</y>
      <w>133</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>   Type Object pattern here</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>672</x>
      <y>364</y>
      <w>105</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>enum LocationStats
--
LS_COVERS
LS_VISIBILITY
LS_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>553</x>
      <y>378</y>
      <w>133</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>lt=-
&lt; used as 
stats indices</panel_attributes>
    <additional_attributes>10.0;20.0;170.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2303</x>
      <y>588</y>
      <w>672</w>
      <h>49</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>940.0;50.0;940.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2814</x>
      <y>623</y>
      <w>294</w>
      <h>294</h>
    </coordinates>
    <panel_attributes>Player
--
#cash: size_t
#history: std::vector&lt;size_t&gt;
#renown: std::vector&lt;size_t&gt;
_#id: size_t = 1_
--
+Player()
/~+Player()/
#level_up(): size_t
+get_cash(): size_t
+get_history(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_history(index: const size_t&amp;): size_t
+get_renown(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_renown(index: const size_t&amp;): size_t
+set_cash(value: const size_t&amp;): size_t
+set_history(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_history(index: const size_t&amp;, value:const size_t&amp;): size_t
+set_renown(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_renown(index: const size_t&amp;, value: const size_t&amp;): size_t
+what(result: std::string&amp;): size_t
+update(): size_t
+add_cash(amount: const size_t&amp;): size_t
+spend_cash(amount: const size_t&amp;): size_t
+add_history(index: const size_t&amp;): size_t
+add_history(index: const size_t&amp;, amount: const size_t&amp;): size_t
+add_renown(amount: const size_t&amp;): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>35</x>
      <y>833</y>
      <w>112</w>
      <h>91</h>
    </coordinates>
    <panel_attributes>enum ContractPhases
--
CF_PENDING
CF_RECRUITING
CF_IN_PROGRESS
CF_SUCCESS
CF_FAILED
CF_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>140</x>
      <y>868</y>
      <w>161</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>lt=-
used as &gt;
phase values</panel_attributes>
    <additional_attributes>10.0;20.0;210.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2030</x>
      <y>308</y>
      <w>196</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;150.0;10.0;150.0;220.0;260.0;220.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2212</x>
      <y>371</y>
      <w>252</w>
      <h>196</h>
    </coordinates>
    <panel_attributes>Faction
--
#influence: size_t
#relationship: size_t
--
+Faction()
/+~Faction()/
+get_influence(): size_t
+get_relationship(): size_t
+set_influence(value: const size_t&amp;): size_t
+set_relationship(value: const size_t&amp;): size_t
+what(result: std::string&amp;): size_t
+update(): size_t
+increase_influence(amount: const size_t&amp;): size_t
+decrease_influence(amount: const size_t&amp;): size_t 
+increase_relationship(amount: const size_t&amp;): size_t
+decrease_relationship(amount: const size_t&amp;): size_t
+create_contract(result: Contract*&amp;): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>406</x>
      <y>259</y>
      <w>1421</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>2010.0;10.0;10.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2457</x>
      <y>497</y>
      <w>546</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=-
offers contracts to &gt;

&lt; takes and completes contracts for </panel_attributes>
    <additional_attributes>10.0;20.0;760.0;20.0;760.0;180.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1764</x>
      <y>1484</y>
      <w>301</w>
      <h>196</h>
    </coordinates>
    <panel_attributes>World
--
#player: Player*
#locations: std::vector&lt;Location*&gt;
#factions: std::vector&lt;Faction*&gt;
#contracts: std::vector&lt;Contract*&gt;
#mercs: std::vector&lt;Mercenary*&gt;
#vendors: std::vector&lt;Vendor*&gt;
#time: size_t
--
+World()
+~World()
+game_loop(): size_t
+get_player_info(result: std::string&amp;):size_t
+get_faction_info(index: const size_t&amp;, result: std::string&amp;): size_t
+get_contract_info(index: const size_t&amp;, result: std::string&amp;): size_t
+get_vendor_info(index: const size_t&amp;, result: std::string&amp;): size_t
+get_time(result: std::string&amp;): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1897</x>
      <y>910</y>
      <w>1113</w>
      <h>588</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;820.0;10.0;720.0;1570.0;720.0;1570.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1596</x>
      <y>1134</y>
      <w>322</w>
      <h>294</h>
    </coordinates>
    <panel_attributes>lt=-
m1=0..*</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;400.0;440.0;400.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>434</x>
      <y>1092</y>
      <w>1183</w>
      <h>336</h>
    </coordinates>
    <panel_attributes>lt=-
m1=0..*</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;460.0;1670.0;460.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>0</x>
      <y>392</y>
      <w>455</w>
      <h>1036</h>
    </coordinates>
    <panel_attributes>lt=-
m1=0..*</panel_attributes>
    <additional_attributes>410.0;10.0;10.0;10.0;10.0;1460.0;630.0;1460.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1918</x>
      <y>1260</y>
      <w>133</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>enum MercAnswer
bg=green
--
MA_OK
MA_TOO_BIG_RISK
MA_WANT_MORE_MONEY
MA_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1638</x>
      <y>1134</y>
      <w>294</w>
      <h>175</h>
    </coordinates>
    <panel_attributes>lt=-



     ^
evaluate_offer()
return values</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;230.0;400.0;230.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2485</x>
      <y>959</y>
      <w>294</w>
      <h>203</h>
    </coordinates>
    <panel_attributes>Vendor
--
#faction_id: size_t
#assortment: std::vector&lt;Item*&gt;
_#id: size_t = 1_
--
+Vendor()
/+~Vendor()/
#form_assortment(): size_t
+get_faction_id(): size_t
+get_assortment(result: std::vector&lt;Item*&gt;&amp;):size_t
+get_assortment(index: const size_t&amp;, result: Item*&amp;): size_t
+set_faction_id(value: const size_t&amp;): size_t
+set_assortment(value: const std::vector&lt;Item*&gt;&amp;): size_t
+set_assortment(index: const size_t&amp;, value: const Item*&amp;): size_t
+what(result: std::string&amp;): size_t
+update(): size_t
+get_price_modifier(): size_t
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2625</x>
      <y>588</y>
      <w>21</w>
      <h>385</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;530.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2436</x>
      <y>777</y>
      <w>112</w>
      <h>196</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=1..*</panel_attributes>
    <additional_attributes>140.0;260.0;140.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2702</x>
      <y>735</y>
      <w>126</w>
      <h>238</h>
    </coordinates>
    <panel_attributes>lt=-
buys and sells &gt;
items</panel_attributes>
    <additional_attributes>160.0;20.0;10.0;20.0;10.0;320.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2632</x>
      <y>1155</y>
      <w>35</w>
      <h>273</h>
    </coordinates>
    <panel_attributes>lt=-
m1=1..*</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;370.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2457</x>
      <y>455</y>
      <w>749</w>
      <h>973</h>
    </coordinates>
    <panel_attributes>lt=-
m1=1..*</panel_attributes>
    <additional_attributes>10.0;10.0;1050.0;10.0;1050.0;1370.0;770.0;1370.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>574</x>
      <y>1526</y>
      <w>189</w>
      <h>77</h>
    </coordinates>
    <panel_attributes>/Event/
--
#world: World&amp;
--
+Event(world: World&amp;)
/+~Event()/
/+happen(): size_t/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>574</x>
      <y>1498</y>
      <w>189</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>                Command pattern here</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>665</x>
      <y>1596</y>
      <w>21</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;180.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>602</x>
      <y>1722</y>
      <w>147</w>
      <h>49</h>
    </coordinates>
    <panel_attributes>Derived classes hierarchy here
to realise various events,
including user input handling.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1358</x>
      <y>1631</y>
      <w>259</w>
      <h>119</h>
    </coordinates>
    <panel_attributes>EventsQueue
--
#events: std::vector&lt;QueueNode&gt;
--
+EventsQueue()
+~EventsQueue()
#heapify(): size_t
#pop(): size_t
+add_event(priority: const size_t&amp;, event: const Event*&amp;)
+remove_event(id: const size_t&amp;): size_t
+update(): size_t


</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>756</x>
      <y>1533</y>
      <w>1022</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;friend&gt;&gt;</panel_attributes>
    <additional_attributes>1440.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>868</x>
      <y>1631</y>
      <w>266</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>QueueNode
--
_#id: size_t = 1_
#own_id: size_t
#priority: size_t
#event: Event*
--
+QueueNode(priority: const size_t&amp;, event: const Event*&amp;)
+~QueueNode()
+get_own_id(): size_t
+get_priority(): size_t
+set_priority(value: const size_t&amp;): size_t
+process(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>756</x>
      <y>1568</y>
      <w>259</w>
      <h>77</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>350.0;90.0;350.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1127</x>
      <y>1687</y>
      <w>245</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=0..*</panel_attributes>
    <additional_attributes>330.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1477</x>
      <y>1673</y>
      <w>448</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>lt=-
changes state &gt;</panel_attributes>
    <additional_attributes>620.0;10.0;620.0;220.0;10.0;220.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>1806</x>
      <y>0</y>
      <w>217</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>Actual questions:
-Game mode: real-time or turn-based?

-Engine for visualization? (proposal: Irrlicht)

-packages for data storage? 
 (proposals: sql database (via sqlite framework),
  json file(s) (via jsoncpp framework))</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>1813</x>
      <y>196</y>
      <w>224</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>                update() method pattern here</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>1568</x>
      <y>0</y>
      <w>203</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>Color notation
--
--
group=0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1568</x>
      <y>21</y>
      <w>203</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>Written, tested
bg=green
group=0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1568</x>
      <y>63</y>
      <w>203</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>Partially written, not tested
bg=yellow
group=0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1568</x>
      <y>84</y>
      <w>203</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>Not written, not tested
group=0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1568</x>
      <y>42</y>
      <w>203</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>Written, not tested
bg=cyan
group=0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>1379</x>
      <y>1484</y>
      <w>112</w>
      <h>63</h>
    </coordinates>
    <panel_attributes>Not the best decision,
other ways to provide
Event's derivatives
with access to World's
protected fields?</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2345</x>
      <y>1057</y>
      <w>98</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>enum ItemRarity
bg=green
--
IR_TRASH
IR_COMMON
IR_GOOD
IR_RARE
IR_EPIC
IR_LEGENDARY
IR_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2387</x>
      <y>945</y>
      <w>56</w>
      <h>126</h>
    </coordinates>
    <panel_attributes>lt=-
     ^
 used as
 rarity
 values</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;160.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1015</x>
      <y>1176</y>
      <w>322</w>
      <h>182</h>
    </coordinates>
    <panel_attributes>MercSpec
--
#name: std::string
#description: std::string
#base_stats: std::vector&lt;size_t&gt;
--
+MercSpec()
+~MercSpec()
+get_name(result: std::string&amp;): size_t
+get_description(result: std::string&amp;): size_t
+get_base_stats(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_base_stats(index: const size_t&amp;, result: size_t&amp;): size_t
+set_name(const std::string&amp; value): size_t
+set_description(const std::string&amp; value): size_t
+set_bonuses(const std::vector&lt;size_t&gt;&amp; value): size_t
+set_bonuses(const size_t&amp; index, const size_t&amp; value): size_t
+what(result: std::string&amp;): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1330</x>
      <y>1134</y>
      <w>245</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>330.0;10.0;330.0;210.0;10.0;210.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>1393</x>
      <y>1260</y>
      <w>133</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>   Type Object pattern here</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
