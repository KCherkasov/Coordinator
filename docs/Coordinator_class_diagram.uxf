<?xml version="1.0" encoding="UTF-8"?><diagram program="umlet" version="13.3">
  <zoom_level>6</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1512</x>
      <y>654</y>
      <w>234</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>/GameObject/
bg=green
--
#own_id: size_t
#name: std::string
#description:: std::string
--
+GameObject()
/+~GameObject()/
+get_own_id(): size_t
+get_name(result: std::string&amp;): size_t
+get_description(result: std::string&amp;): size_t
+set_own_id(value: const size_t&amp;): size_t
+set_name(value: const std::string&amp;): size_t
+set_description(value: const std::string&amp;): size_t
/+what(result: std::string&amp;): size_t/
/+update(): size_t/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1080</x>
      <y>966</y>
      <w>198</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>/GameCharacter/
--
#faction_id: size_t
--
+GameCharacter()
/+~GameCharacter()/
+get_faction_id(): size_t
+set_faction_id(value: const size_t&amp;): size_t

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1554</x>
      <y>834</y>
      <w>186</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>/LevelableObject/
bg=green
--
#level: size_t
--
+LevelableObject()
/+~LevelableObject()/
+get_level(): size_t
+set_level(value: const size_t&amp;): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1644</x>
      <y>798</y>
      <w>18</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1848</x>
      <y>966</y>
      <w>246</w>
      <h>282</h>
    </coordinates>
    <panel_attributes>Item
bg=green
--
#owner_id: size_t
#bonuses: std::vector&lt;size_t&gt;
#slots: std::vector&lt;bool&gt;
#kind: size_t
#rarity: size_t
#price: size_t
_#id: size_t = 1_
--
+Item()
/+~Item()/
+get_owner_id(): size_t
+get_bonuses(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_bonuses(index: const size_t&amp;): size_t
+get_slots(result: std::vector&lt;bool&gt;&amp;): size_t
+get_slots(index: const size_t&amp;): bool
+get_kind(): size_t
+get_rarity(): size_t
+get_price(): size_t
+set_owner_id(value: const size_t&amp;): size_t
+set_bonuses(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_bonuses(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_slots(value: const std::vector&lt;bool&gt;&amp;): size_t
+set_slots(index: const size_t&amp;, value: const bool&amp;): size_t
+set_kind(value: const size_t&amp;): size_t
+set_rarity(value: const size_t&amp;): size_t
+set_price(value: const size_t&amp;): size_t
+what(result: std::string&amp;): size_t
+update(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1644</x>
      <y>900</y>
      <w>348</w>
      <h>78</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0;560.0;70.0;560.0;110.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1152</x>
      <y>936</y>
      <w>510</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;50.0;10.0;10.0;830.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1554</x>
      <y>1098</y>
      <w>246</w>
      <h>132</h>
    </coordinates>
    <panel_attributes>Inventory
--
#equipped: std::vector&lt;Item*&gt;
--
+Inventory()
+~Inventory()
+get_equipped(result: std::vector&lt;Item*&gt;&amp;): size_t
+get_equipped(index: const size_t&amp;, result: Item*&amp;): size_t
+get_bonuses(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_bonuses(index: const size_t&amp;): size_t
+set_equipped(value: const: std::vector&lt;Item*&gt;&amp;): size_t
+set_equipped(index: const size_t&amp;, value: Item*): size_t
+what(result: std::string&amp;): size_t
+update(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1794</x>
      <y>1146</y>
      <w>66</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=1..*</panel_attributes>
    <additional_attributes>10.0;10.0;90.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1500</x>
      <y>1146</y>
      <w>66</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;90.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1182</x>
      <y>1098</y>
      <w>324</w>
      <h>312</h>
    </coordinates>
    <panel_attributes>Mercenary
--
#experience: std::vector&lt;size_t&gt;
#merc_stats: std::vector&lt;size_t&gt;
#recruitment_stats: std::vector&lt;size_t&gt;
#history: std::vector&lt;size_t&gt;
#equipment: Inventory*
_#id: size_t = 1_
--
+Mercenary()
/+~Mercenary()/
#level_up(): size_t
#evaluate_offer(risk: const size_t&amp;, payment: const size_t&amp;): size_t
+get_experience(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_experience(index: const size_t&amp;): size_t
+get_merc_stats(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_merc_stats(index: const size_t&amp;): size_t
+get_recruitment_stats(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_recruitment_stats(index: const size_t&amp;): size_t
+get_history(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_history(index: const size_t&amp;): size_t
+get_equipment(): Inventory&amp;
+set_experience(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_experience(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_merc_stats(value: const: std::vector&lt;size_t&gt;&amp;): size_t
+set_merc_stats(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_recruitment_stats(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_recruitment_stats(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_history(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_history(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_equipment(value: Inventory*): size_t
+what(result: std::string&amp;): size_t
+update(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1152</x>
      <y>1032</y>
      <w>228</w>
      <h>78</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0;360.0;60.0;360.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>744</x>
      <y>1098</y>
      <w>366</w>
      <h>216</h>
    </coordinates>
    <panel_attributes>Enemy
--
#task_stats: std::vector&lt;size_t&gt;
#loot_list: std::vector&lt;std::pair&lt;size_t, size_t&gt; &gt;
#reward: std::vector&lt;size_t&gt;
_#id: size_t = 1_
--
+Target()
/+~Target()/
+get_task_stats(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_task_stats(index: const size_t&amp;): size_t
+get_loot_list(result: std::vector&lt;std::pair&lt;size_t, size_t&gt; &gt;&amp;): size_t
+get_loot_list(index: const size_t&amp;, result: std::pair&lt;size_t, size_t&gt;&amp;): size_t
+get_reward(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_reward(index: const size_t&amp;): size_t
+set_task_stats(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_task_stats(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_loot_list(value: const std::vector&lt;std::pair&lt;size_t, size_t&gt; &gt;&amp;): size_t
+set_loot_list(index: const size_t&amp;, value: const std::pair&lt;size_t, size_t&gt;&amp;): size_t
+set_reward(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_reward(index: const size_t&amp;, value: const size_t&amp;): size_t
+what(result: std::string&amp;): size_t
+update(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>924</x>
      <y>1062</y>
      <w>246</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0;390.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1644</x>
      <y>1242</y>
      <w>114</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>bg=green
enum StatsIndices
--
SI_POWER
SI_MELEE
SI_STEALTH
SI_RANGE
SI_AGILITY
SI_ENDURANCE
SI_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1500</x>
      <y>1272</y>
      <w>156</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=-
&lt; used as task_stats indices</panel_attributes>
    <additional_attributes>10.0;20.0;240.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1644</x>
      <y>1338</y>
      <w>114</w>
      <h>78</h>
    </coordinates>
    <panel_attributes>bg=green
enum RecruitmentStats
--
RS_GREED
RS_CAUTION
RS_INVENTIVE
RS_ACCURACY
RS_EDUCABILITY
RS_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1500</x>
      <y>1350</y>
      <w>156</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>lt=-
&lt; used as 
recruitment_stats 
indices</panel_attributes>
    <additional_attributes>10.0;20.0;240.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1752</x>
      <y>1242</y>
      <w>180</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>lt=-
used as bonuses indices &gt;</panel_attributes>
    <additional_attributes>10.0;70.0;280.0;70.0;280.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1602</x>
      <y>966</y>
      <w>120</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>enum Inventory_slots
bg=green
--
IS_HEAD
IS_ARMOUR
IS_GLOVES
IS_BOOTS
IS_PRIMARY_WEAPON
IS_SECONDARY_WEAPON
IS_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1716</x>
      <y>1002</y>
      <w>144</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=-
used as slots indices  &gt;</panel_attributes>
    <additional_attributes>10.0;20.0;220.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1674</x>
      <y>1050</y>
      <w>120</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=-
used as equipped indices
                  v</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1644</x>
      <y>1428</y>
      <w>114</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>bg=green
enum MercHistory
--
MH_TASKS_COMPLETED
MH_TASKS_FAILED
MH_CASH_EARNED
MH_ENEMIES_KILLED
MH_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1440</x>
      <y>1404</y>
      <w>216</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=-
     ^
used as 
 history 
 indices</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0;340.0;100.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>378</x>
      <y>936</y>
      <w>792</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;50.0;10.0;10.0;1300.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>222</x>
      <y>966</y>
      <w>318</w>
      <h>408</h>
    </coordinates>
    <panel_attributes>Contract
--
#reward: size_t
#employer_faction: size_t
#target_faction: size_t
#phase: size_t
#bonuses: std::vector&lt;size_t&gt;
#mercs: std::vector&lt;Mercenary*&gt; //or their own_ids shall be used here?
#enemies: std::vector&lt;Enemy*&gt;
#location: Location&amp;
_#id: size_t = 1_
--
+Contract()
/+Contract()/
+get_reward(): size_t
+get_employer_faction(): size_t
+get_target_faction(): size_t
+get_phase(): size_t
+get_bonuses(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_bonuses(index: const size_t&amp;): size_t
+get_mercs(result: std::vector&lt;Mercenary*&gt;&amp;): size_t
+get_mercs(index: const size_t&amp;, result: Mercenary*&amp;): size_t
+get_enemies(result: std::vector&lt;Enemy*&gt;&amp;): size_t
+get_enemies(index: const size_t&amp;, result: Enemy*&amp;): size_t
+get_location(): Location&amp;
+get_risk(): size_t
+set_reward(value: const size_t&amp;): size_t
+set_employer_faction(value: const size_t&amp;): size_t
+set_target_faction(value: const size_t&amp;): size_t
+set_phase(value: const size_t&amp;): size_t
+set_bonuses(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_bonuses(index: const size_t&amp;, value: const size_t&amp;): size_t
+set_mercs(value: const std::vector&lt;Mercenary*&gt;&amp;): size_t
+set_mercs(index: const size_t&amp;, value: const Mercenary*&amp;): size_t
+set_enemies(value: const std::vector&lt;Enemy*&gt;&amp;): size_t
+set_enemies(index: const size_t&amp;, value: const Enemy*&amp;): size_t
+set_location(value: const Location&amp;): size_t
+what(result: std::string&amp;): size_t
+update(): size_t
+add_mercenary(new_merc: const Mercenary*&amp;): size_t
+remove_mercenary(index: const size_t&amp;): size_t
+make_offer(summ: const size_t&amp;): size_t
+is_done(): bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>534</x>
      <y>1086</y>
      <w>222</w>
      <h>138</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1..*</panel_attributes>
    <additional_attributes>10.0;10.0;220.0;10.0;220.0;200.0;350.0;200.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>534</x>
      <y>1128</y>
      <w>660</w>
      <h>222</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=1..*</panel_attributes>
    <additional_attributes>10.0;10.0;170.0;10.0;170.0;340.0;1080.0;340.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>222</x>
      <y>744</y>
      <w>270</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>Location
--
#stats: std::vector&lt;size_t&gt;
_#id: size_t = 1_
--
+Location()
+~Location()
+get_stats(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_stats(index: const size_t&amp;): size_t
+set_stats(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_stats(index: const size_t&amp;, value: const size_t&amp;): size_t
+what(result: std::string&amp;): size_t
+update(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>348</x>
      <y>858</y>
      <w>18</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;180.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>354</x>
      <y>894</y>
      <w>114</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>   Type Object pattern here</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>588</x>
      <y>774</y>
      <w>90</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>enum LocationStats
--
LS_COVERS
LS_VISIBILITY
LS_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>486</x>
      <y>786</y>
      <w>114</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=-
&lt; used as 
stats indices</panel_attributes>
    <additional_attributes>10.0;20.0;170.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1974</x>
      <y>936</y>
      <w>576</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>940.0;50.0;940.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2394</x>
      <y>966</y>
      <w>288</w>
      <h>258</h>
    </coordinates>
    <panel_attributes>Player
--
#cash: size_t
#history: std::vector&lt;size_t&gt;
#renown: std::vector&lt;size_t&gt;
_#id: size_t = 1_
--
+Player()
/~+Player()/
#level_up(): size_t
+get_cash(): size_t
+get_history(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_history(index: const size_t&amp;): size_t
+get_renown(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_renown(index: const size_t&amp;): size_t
+set_cash(value: const size_t&amp;): size_t
+set_history(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_history(index: const size_t&amp;, value:const size_t&amp;): size_t
+set_renown(value: const std::vector&lt;size_t&gt;&amp;): size_t
+set_renown(index: const size_t&amp;, value: const size_t&amp;): size_t
+what(result: std::string&amp;): size_t
+update(): size_t
+add_cash(amount: const size_t&amp;): size_t
+spend_cash(amount: const size_t&amp;): size_t
+add_history(index: const size_t&amp;): size_t
+add_history(index: const size_t&amp;, amount: const size_t&amp;): size_t
+add_renown(amount: const size_t&amp;): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>30</x>
      <y>1146</y>
      <w>96</w>
      <h>78</h>
    </coordinates>
    <panel_attributes>enum ContractPhases
--
CF_PENDING
CF_RECRUITING
CF_IN_PROGRESS
CF_SUCCESS
CF_FAILED
CF_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>120</x>
      <y>1176</y>
      <w>114</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=-
used as &gt;
phase values</panel_attributes>
    <additional_attributes>10.0;20.0;170.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1740</x>
      <y>696</y>
      <w>156</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;150.0;10.0;150.0;220.0;240.0;220.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1884</x>
      <y>738</y>
      <w>246</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>Faction
--
#influence: size_t
#relationship: size_t
--
+Faction()
/+~Faction()/
+get_influence(): size_t
+get_relationship(): size_t
+set_influence(value: const size_t&amp;): size_t
+set_relationship(value: const size_t&amp;): size_t
+what(result: std::string&amp;): size_t
+update(): size_t
+increase_influence(amount: const size_t&amp;): size_t
+decrease_influence(amount: const size_t&amp;): size_t 
+increase_relationship(amount: const size_t&amp;): size_t
+decrease_relationship(amount: const size_t&amp;): size_t
+create_contract(result: Contract*&amp;): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>348</x>
      <y>720</y>
      <w>1176</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>1940.0;10.0;10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2124</x>
      <y>858</y>
      <w>450</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=-
offers contracts to &gt;

&lt; takes and completes contracts for </panel_attributes>
    <additional_attributes>10.0;20.0;730.0;20.0;730.0;180.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1512</x>
      <y>1704</y>
      <w>300</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>World
--
#player: Player*
#locations: std::vector&lt;Location*&gt;
#factions: std::vector&lt;Faction*&gt;
#contracts: std::vector&lt;Contract*&gt;
#mercs: std::vector&lt;Mercenary*&gt;
#vendors: std::vector&lt;Vendor*&gt;
#time: size_t
--
+World()
+~World()
+game_loop(): size_t
+get_player_info(result: std::string&amp;):size_t
+get_faction_info(index: const size_t&amp;, result: std::string&amp;): size_t
+get_contract_info(index: const size_t&amp;, result: std::string&amp;): size_t
+get_vendor_info(index: const size_t&amp;, result: std::string&amp;): size_t
+get_time(result: std::string&amp;): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1626</x>
      <y>1218</y>
      <w>954</w>
      <h>498</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;810.0;10.0;710.0;1570.0;710.0;1570.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1368</x>
      <y>1404</y>
      <w>276</w>
      <h>252</h>
    </coordinates>
    <panel_attributes>lt=-
m1=0..*</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;400.0;440.0;400.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>372</x>
      <y>1368</y>
      <w>1014</w>
      <h>288</h>
    </coordinates>
    <panel_attributes>lt=-
m1=0..*</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;460.0;1670.0;460.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>0</x>
      <y>798</y>
      <w>390</w>
      <h>858</h>
    </coordinates>
    <panel_attributes>lt=-
m1=0..*</panel_attributes>
    <additional_attributes>370.0;10.0;10.0;10.0;10.0;1410.0;630.0;1410.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1644</x>
      <y>1512</y>
      <w>114</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>enum MercAnswer
bg=green
--
MA_OK
MA_TOO_BIG_RISK
MA_WANT_MORE_MONEY
MA_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1404</x>
      <y>1404</y>
      <w>252</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>lt=-



     ^
evaluate_offer()
return values</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;230.0;400.0;230.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2130</x>
      <y>1254</y>
      <w>294</w>
      <h>174</h>
    </coordinates>
    <panel_attributes>Vendor
--
#faction_id: size_t
#assortment: std::vector&lt;Item*&gt;
_#id: size_t = 1_
--
+Vendor()
/+~Vendor()/
#form_assortment(): size_t
+get_faction_id(): size_t
+get_assortment(result: std::vector&lt;Item*&gt;&amp;):size_t
+get_assortment(index: const size_t&amp;, result: Item*&amp;): size_t
+set_faction_id(value: const size_t&amp;): size_t
+set_assortment(value: const std::vector&lt;Item*&gt;&amp;): size_t
+set_assortment(index: const size_t&amp;, value: const Item*&amp;): size_t
+what(result: std::string&amp;): size_t
+update(): size_t
+get_price_modifier(): size_t
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2250</x>
      <y>936</y>
      <w>18</w>
      <h>330</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;530.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2088</x>
      <y>1098</y>
      <w>96</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=1..*</panel_attributes>
    <additional_attributes>140.0;260.0;140.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2316</x>
      <y>1062</y>
      <w>90</w>
      <h>204</h>
    </coordinates>
    <panel_attributes>lt=-
buys and sells &gt;
items</panel_attributes>
    <additional_attributes>130.0;20.0;10.0;20.0;10.0;320.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2256</x>
      <y>1422</y>
      <w>30</w>
      <h>234</h>
    </coordinates>
    <panel_attributes>lt=-
m1=1..*</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;370.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2124</x>
      <y>822</y>
      <w>624</w>
      <h>834</h>
    </coordinates>
    <panel_attributes>lt=-
m1=1..*</panel_attributes>
    <additional_attributes>10.0;10.0;1020.0;10.0;1020.0;1370.0;740.0;1370.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>492</x>
      <y>1740</y>
      <w>162</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>/Event/
--
#world: World&amp;
--
+Event(world: World&amp;)
/+~Event()/
/+happen(): size_t/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>492</x>
      <y>1716</y>
      <w>162</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>          Command pattern here</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>570</x>
      <y>1800</y>
      <w>18</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;180.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>516</x>
      <y>1908</y>
      <w>126</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>Derived classes hierarchy here
to realise various events,
including user input handling.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1164</x>
      <y>1830</y>
      <w>288</w>
      <h>102</h>
    </coordinates>
    <panel_attributes>EventsQueue
--
#events: std::vector&lt;QueueNode&gt;
--
+EventsQueue()
+~EventsQueue()
#heapify(): size_t
#pop(): size_t
+add_event(priority: const size_t&amp;, event: const Event*&amp;): size_t
+remove_event(id: const size_t&amp;): size_t
+update(): size_t


</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>648</x>
      <y>1746</y>
      <w>876</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;friend&gt;&gt;</panel_attributes>
    <additional_attributes>1440.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>744</x>
      <y>1830</y>
      <w>228</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>QueueNode
--
_#id: size_t = 1_
#own_id: size_t
#priority: size_t
#event: Event*
--
+QueueNode(priority: const size_t&amp;, event: const Event*&amp;)
+~QueueNode()
+get_own_id(): size_t
+get_priority(): size_t
+set_priority(value: const size_t&amp;): size_t
+process(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>648</x>
      <y>1776</y>
      <w>222</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>350.0;90.0;350.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>966</x>
      <y>1878</y>
      <w>210</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=0..*</panel_attributes>
    <additional_attributes>330.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1266</x>
      <y>1866</y>
      <w>384</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>lt=-
changes state &gt;</panel_attributes>
    <additional_attributes>620.0;10.0;620.0;220.0;10.0;220.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>768</x>
      <y>432</y>
      <w>186</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>Actual questions:
-Game mode: real-time or turn-based?

-Engine for visualization? (proposal: Irrlicht)

-packages for data storage? 
 (proposals: sql database (via sqlite framework),
  json file(s) (via jsoncpp framework))</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>1746</x>
      <y>666</y>
      <w>126</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>   update() method pattern</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>564</x>
      <y>432</y>
      <w>174</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>Color notation
--
--
group=0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>564</x>
      <y>450</y>
      <w>174</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>Written, tested
bg=green
group=0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>564</x>
      <y>486</y>
      <w>174</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>Partially written, not tested
bg=yellow
group=0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>564</x>
      <y>504</y>
      <w>174</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>Not written, not tested
group=0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>564</x>
      <y>468</y>
      <w>174</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>Written, not tested
bg=cyan
group=0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>1182</x>
      <y>1668</y>
      <w>96</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>Not the best decision,
other ways to provide
Event's derivatives
with access to World's
protected fields?</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2010</x>
      <y>1338</y>
      <w>84</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>enum ItemRarity
bg=green
--
IR_TRASH
IR_COMMON
IR_GOOD
IR_RARE
IR_EPIC
IR_LEGENDARY
IR_SIZE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2046</x>
      <y>1242</y>
      <w>48</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>lt=-
     ^
 used as
 rarity
 values</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;160.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>870</x>
      <y>1440</y>
      <w>276</w>
      <h>156</h>
    </coordinates>
    <panel_attributes>MercSpec
--
#name: std::string
#description: std::string
#base_stats: std::vector&lt;size_t&gt;
--
+MercSpec()
+~MercSpec()
+get_name(result: std::string&amp;): size_t
+get_description(result: std::string&amp;): size_t
+get_base_stats(result: std::vector&lt;size_t&gt;&amp;): size_t
+get_base_stats(index: const size_t&amp;, result: size_t&amp;): size_t
+set_name(const std::string&amp; value): size_t
+set_description(const std::string&amp; value): size_t
+set_bonuses(const std::vector&lt;size_t&gt;&amp; value): size_t
+set_bonuses(const size_t&amp; index, const size_t&amp; value): size_t
+what(result: std::string&amp;): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1140</x>
      <y>1404</y>
      <w>210</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>330.0;10.0;330.0;210.0;10.0;210.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>1194</x>
      <y>1512</y>
      <w>114</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>   Type Object pattern here</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1278</x>
      <y>138</y>
      <w>306</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>/Observer/
bg=cyan
--

--
+Observer()
/+~Observer()/
+on_notify(message: Message*): size_t
group=2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1422</x>
      <y>198</y>
      <w>18</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=1
group=2</panel_attributes>
    <additional_attributes>10.0;120.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>1386</x>
      <y>0</y>
      <w>78</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>Polymorph hierarchy of observers here
group=2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1422</x>
      <y>36</y>
      <w>18</w>
      <h>114</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
group=2</panel_attributes>
    <additional_attributes>10.0;170.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1686</x>
      <y>144</y>
      <w>150</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>/Message/
bg=green
--
#sender: GameObject*
--
+Message(sender: GameObject*)
/+~Message()/
+sender(): GameObject*
group=2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1578</x>
      <y>156</y>
      <w>120</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=-
&lt; being sent to
group=2</panel_attributes>
    <additional_attributes>10.0;20.0;180.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>1908</x>
      <y>150</y>
      <w>84</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>Polymorph messages hierarchy here
group=2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1830</x>
      <y>162</y>
      <w>90</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
group=2</panel_attributes>
    <additional_attributes>10.0;10.0;130.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1320</x>
      <y>270</y>
      <w>228</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>Observing
bg=cyan
--
+next: Observing*
+observer: Observer*
--
+Observing(next: Observing*, observer: Observer*)
+~Observing()
group=2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1332</x>
      <y>396</y>
      <w>204</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>Subject
bg=cyan
--
#head: Observing*
--
+Subject()
+~Subject()
#notify(Message* msg)
+add_observer(observer: Observer*): size_t
+remove_observer(observer: Observer*): size_t
+update(msg: Message*): size_t
group=2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1422</x>
      <y>324</y>
      <w>30</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=0..*
group=2</panel_attributes>
    <additional_attributes>10.0;120.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1530</x>
      <y>198</y>
      <w>198</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>lt=-
sends &gt;
group=2</panel_attributes>
    <additional_attributes>10.0;430.0;310.0;430.0;310.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1632</x>
      <y>198</y>
      <w>156</w>
      <h>468</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>240.0;10.0;240.0;630.0;10.0;630.0;10.0;760.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1326</x>
      <y>552</y>
      <w>222</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>SubjectNode
bg=cyan
group=2
--
+next: SubjectNode*
+subject: Subject*
--
+SubjectNode(next: SubjectNode*, subject: Subject*)
+~SubjectNode()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1422</x>
      <y>486</y>
      <w>18</w>
      <h>78</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
group=2
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;110.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1422</x>
      <y>612</y>
      <w>102</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=0..*</panel_attributes>
    <additional_attributes>150.0;150.0;10.0;150.0;10.0;10.0</additional_attributes>
  </element>
</diagram>
